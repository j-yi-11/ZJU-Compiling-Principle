fn @putint(#x: i32) -> ();

fn @putch(#x: i32) -> ();

fn @putarray(#n: i32, #arr: i32*) -> ();

fn @getint() -> i32;

fn @getch() -> i32;

fn @getarray(#n: i32, #arr: i32*) -> ();

fn @main() -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %a: i32* = alloca i32, 1
  let %b: i32* = alloca i32, 1
  let %5: () = store 2, %b: i32*
  let %c: i32* = alloca i32, 1
  let %7: i32 = sub 0, 1
  let %8: () = store %7: i32, %c: i32*
  let %9: () = store 1, %a: i32*
  let %10: i32 = load %a: i32*
  let %11: i32 = load %b: i32*
  let %12: i32 = add %10: i32, %11: i32
  br %12: i32, label %if_then, label %if_end
%if_then:
  let %15: () = store 3, %a: i32*
  jmp label %if_end
%if_end:
  let %16: i32 = load %c: i32*
  let %17: i32 = sub 0, %16: i32
  br %17: i32, label %if_then.1, label %if_end.1
%if_then.1:
  let %20: () = store 4, %b: i32*
  jmp label %if_end.1
%if_end.1:
  let %21: i32 = load %a: i32*
  let %22: i32 = load %b: i32*
  let %23: i32 = add %21: i32, %22: i32
  let %24: i32 = load %c: i32*
  let %25: i32 = add %23: i32, %24: i32
  let %26: () = call @putint, %25: i32
  let %27: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %30: i32 = load %ret_val.addr: i32*
  ret %30: i32
}


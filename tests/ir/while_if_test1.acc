fn @putint(#x: i32) -> ();

fn @putch(#x: i32) -> ();

fn @putarray(#n: i32, #arr: i32*) -> ();

fn @getint() -> i32;

fn @getch() -> i32;

fn @getarray(#n: i32, #arr: i32*) -> ();

fn @whileIf() -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %a: i32* = alloca i32, 1
  let %4: () = store 0, %a: i32*
  let %b: i32* = alloca i32, 1
  let %6: () = store 0, %b: i32*
  jmp label %while_cond
%while_cond:
  let %10: i32 = load %a: i32*
  let %11: i32 = lt %10: i32, 100
  br %11: i32, label %while_body, label %while_end
%while_body:
  let %12: i32 = load %a: i32*
  let %13: i32 = eq %12: i32, 5
  br %13: i32, label %if_then, label %if_else
%while_end:
  let %30: i32 = load %b: i32*
  let %31: () = store %30: i32, %ret_val.addr: i32*
  jmp label %exit
%if_then:
  let %17: () = store 25, %b: i32*
  jmp label %if_end
%if_end:
  let %27: i32 = load %a: i32*
  let %28: i32 = add %27: i32, 1
  let %29: () = store %28: i32, %a: i32*
  jmp label %while_cond
%if_else:
  let %18: i32 = load %a: i32*
  let %19: i32 = eq %18: i32, 10
  br %19: i32, label %if_then.1, label %if_else.1
%if_then.1:
  let %23: () = store 42, %b: i32*
  jmp label %if_end.1
%if_end.1:
  jmp label %if_end
%if_else.1:
  let %24: i32 = load %a: i32*
  let %25: i32 = mul %24: i32, 2
  let %26: () = store %25: i32, %b: i32*
  jmp label %if_end.1
%after_return:
  jmp label %exit
%exit:
  let %34: i32 = load %ret_val.addr: i32*
  ret %34: i32
}

fn @main() -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %3: i32 = call @whileIf
  let %4: () = call @putint, %3: i32
  let %5: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %8: i32 = load %ret_val.addr: i32*
  ret %8: i32
}


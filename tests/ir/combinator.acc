fn @putint(#x: i32) -> ();

fn @putch(#x: i32) -> ();

fn @putarray(#n: i32, #arr: i32*) -> ();

fn @getint() -> i32;

fn @getch() -> i32;

fn @getarray(#n: i32, #arr: i32*) -> ();

fn @factorial(#m: i32) -> i32 {
%entry:
  let %m.addr: i32* = alloca i32, 1
  let %3: () = store #m: i32, %m.addr: i32*
  let %ret_val.addr: i32* = alloca i32, 1
  let %f_res: i32* = alloca i32, 1
  let %6: () = store 1, %f_res: i32*
  jmp label %while_cond
%while_cond:
  let %10: i32 = load %m.addr: i32*
  let %11: i32 = gt %10: i32, 1
  br %11: i32, label %while_body, label %while_end
%while_body:
  let %12: i32 = load %f_res: i32*
  let %13: i32 = load %m.addr: i32*
  let %14: i32 = mul %12: i32, %13: i32
  let %15: () = store %14: i32, %f_res: i32*
  let %16: i32 = load %m.addr: i32*
  let %17: i32 = sub %16: i32, 1
  let %18: () = store %17: i32, %m.addr: i32*
  jmp label %while_cond
%while_end:
  let %19: i32 = load %f_res: i32*
  let %20: () = store %19: i32, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %23: i32 = load %ret_val.addr: i32*
  ret %23: i32
}

fn @cal_combiniation(#c_base: i32, #c_num: i32) -> i32 {
%entry:
  let %c_base.addr: i32* = alloca i32, 1
  let %3: () = store #c_base: i32, %c_base.addr: i32*
  let %c_num.addr: i32* = alloca i32, 1
  let %5: () = store #c_num: i32, %c_num.addr: i32*
  let %ret_val.addr: i32* = alloca i32, 1
  let %7: i32 = load %c_base.addr: i32*
  let %8: i32 = call @factorial, %7: i32
  let %9: i32 = load %c_num.addr: i32*
  let %10: i32 = call @factorial, %9: i32
  let %11: i32 = load %c_base.addr: i32*
  let %12: i32 = load %c_num.addr: i32*
  let %13: i32 = sub %11: i32, %12: i32
  let %14: i32 = call @factorial, %13: i32
  let %15: i32 = mul %10: i32, %14: i32
  let %16: i32 = div %8: i32, %15: i32
  let %17: () = store %16: i32, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %20: i32 = load %ret_val.addr: i32*
  ret %20: i32
}

fn @cal_permutation(#p_base: i32, #p_num: i32) -> i32 {
%entry:
  let %p_base.addr: i32* = alloca i32, 1
  let %3: () = store #p_base: i32, %p_base.addr: i32*
  let %p_num.addr: i32* = alloca i32, 1
  let %5: () = store #p_num: i32, %p_num.addr: i32*
  let %ret_val.addr: i32* = alloca i32, 1
  let %7: i32 = load %p_base.addr: i32*
  let %8: i32 = call @factorial, %7: i32
  let %9: i32 = load %p_base.addr: i32*
  let %10: i32 = load %p_num.addr: i32*
  let %11: i32 = sub %9: i32, %10: i32
  let %12: i32 = call @factorial, %11: i32
  let %13: i32 = div %8: i32, %12: i32
  let %14: () = store %13: i32, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %17: i32 = load %ret_val.addr: i32*
  ret %17: i32
}

fn @main() -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %n: i32* = alloca i32, 1
  let %4: i32 = call @getint
  let %5: () = store %4: i32, %n: i32*
  let %k: i32* = alloca i32, 1
  let %7: i32 = call @getint
  let %8: () = store %7: i32, %k: i32*
  let %9: i32 = load %n: i32*
  let %10: i32 = load %k: i32*
  let %11: i32 = call @cal_combiniation, %9: i32, %10: i32
  let %12: () = call @putint, %11: i32
  let %13: () = call @putch, 32
  let %14: i32 = load %n: i32*
  let %15: i32 = load %k: i32*
  let %16: i32 = call @cal_permutation, %14: i32, %15: i32
  let %17: () = call @putint, %16: i32
  let %18: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %21: i32 = load %ret_val.addr: i32*
  ret %21: i32
}


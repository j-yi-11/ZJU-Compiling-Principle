fn @putint(#x: i32) -> ();

fn @putch(#x: i32) -> ();

fn @putarray(#n: i32, #arr: i32*) -> ();

fn @getint() -> i32;

fn @getch() -> i32;

fn @getarray(#n: i32, #arr: i32*) -> ();

fn @main() -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %k: i32* = alloca i32, 1
  let %n: i32* = alloca i32, 1
  let %5: () = store 10, %n: i32*
  let %i: i32* = alloca i32, 1
  let %7: () = store 0, %i: i32*
  let %8: () = store 1, %k: i32*
  jmp label %while_cond
%while_cond:
  let %12: i32 = load %i: i32*
  let %13: i32 = load %n: i32*
  let %14: i32 = sub %13: i32, 1
  let %15: i32 = le %12: i32, %14: i32
  br %15: i32, label %while_body, label %while_end
%while_body:
  let %16: i32 = load %i: i32*
  let %17: i32 = add %16: i32, 1
  let %18: () = store %17: i32, %i: i32*
  let %19: i32 = load %k: i32*
  let %20: i32 = add %19: i32, 1
  let %21: i32 = load %k: i32*
  let %22: i32 = load %k: i32*
  let %23: i32 = add %21: i32, %22: i32
  let %24: () = store %23: i32, %k: i32*
  jmp label %while_cond
%while_end:
  let %25: i32 = load %k: i32*
  let %26: () = call @putint, %25: i32
  let %27: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %30: i32 = load %ret_val.addr: i32*
  ret %30: i32
}


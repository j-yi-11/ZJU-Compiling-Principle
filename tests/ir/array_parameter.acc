fn @putint(#x: i32) -> ();

fn @putch(#x: i32) -> ();

fn @putarray(#n: i32, #arr: i32*) -> ();

fn @getint() -> i32;

fn @getch() -> i32;

fn @getarray(#n: i32, #arr: i32*) -> ();

fn @print_array(#a: i32*, #len: i32) -> () {
%entry:
  let %len.addr: i32* = alloca i32, 1
  let %3: () = store #len: i32, %len.addr: i32*
  let %i: i32* = alloca i32, 1
  let %5: () = store 0, %i: i32*
  jmp label %while_cond
%while_cond:
  let %9: i32 = load %i: i32*
  let %10: i32 = load %len.addr: i32*
  let %11: i32 = lt %9: i32, %10: i32
  br %11: i32, label %while_body, label %while_end
%while_body:
  let %12: i32 = load %i: i32*
  let %13: i32* = offset i32, #a: i32*, [%12: i32 < none]
  let %14: i32 = load %13: i32*
  let %15: () = call @putint, %14: i32
  let %16: () = call @putch, 32
  let %17: i32 = load %i: i32*
  let %18: i32 = add %17: i32, 1
  let %19: () = store %18: i32, %i: i32*
  jmp label %while_cond
%while_end:
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  ret ()
}

fn @main() -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %a: i32* = alloca i32, 8
  let %4: i32* = offset i32, %a: i32*, [0 < 4], [0 < 2]
  let %5: () = store 1, %4: i32*
  let %6: i32* = offset i32, %a: i32*, [0 < 4], [1 < 2]
  let %7: () = store 2, %6: i32*
  let %8: i32* = offset i32, %a: i32*, [1 < 4], [0 < 2]
  let %9: () = store 3, %8: i32*
  let %10: i32* = offset i32, %a: i32*, [1 < 4], [1 < 2]
  let %11: () = store 4, %10: i32*
  let %12: i32* = offset i32, %a: i32*, [2 < 4], [0 < 2]
  let %13: () = store 5, %12: i32*
  let %14: i32* = offset i32, %a: i32*, [2 < 4], [1 < 2]
  let %15: () = store 6, %14: i32*
  let %16: i32* = offset i32, %a: i32*, [3 < 4], [0 < 2]
  let %17: () = store 7, %16: i32*
  let %18: i32* = offset i32, %a: i32*, [3 < 4], [1 < 2]
  let %19: () = store 8, %18: i32*
  let %20: i32* = offset i32, %a: i32*, [2 < 4], [0 < 2]
  let %21: () = call @print_array, %20: i32*, 2
  let %22: i32* = offset i32, %a: i32*, [1 < 4], [0 < 2]
  let %23: () = call @print_array, %22: i32*, 2
  let %24: i32* = offset i32, %a: i32*, [0 < 4], [0 < 2]
  let %25: () = call @print_array, %24: i32*, 2
  let %26: i32* = offset i32, %a: i32*, [3 < 4], [0 < 2]
  let %27: () = call @print_array, %26: i32*, 2
  let %28: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %31: i32 = load %ret_val.addr: i32*
  ret %31: i32
}


@a: region i32, 1 

@b: region i32, 2 

@c: region i32, 12 

@i: region i32, 1 

fn @putint(#x: i32) -> ();

fn @putch(#x: i32) -> ();

fn @putarray(#n: i32, #arr: i32*) -> ();

fn @getint() -> i32;

fn @getch() -> i32;

fn @getarray(#n: i32, #arr: i32*) -> ();

fn @main() -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %3: () = store 2024, @i: i32*
  jmp label %while_cond
%while_cond:
  let %7: i32 = load @a: i32*
  let %8: i32 = lt %7: i32, 2
  br %8: i32, label %while_body, label %while_end
%while_body:
  let %9: i32 = load @a: i32*
  let %10: i32 = mul %9: i32, 2
  let %11: i32 = load @a: i32*
  let %12: i32* = offset i32, @b: i32*, [%11: i32 < 2]
  let %13: () = store %10: i32, %12: i32*
  let %14: i32 = load @a: i32*
  let %15: i32 = add %14: i32, 1
  let %16: () = store %15: i32, @a: i32*
  jmp label %while_cond
%while_end:
  let %17: i32 = load @a: i32*
  let %18: i32* = offset i32, @b: i32*, [0 < 2]
  let %19: i32 = load %18: i32*
  let %20: i32 = add %17: i32, %19: i32
  let %21: i32* = offset i32, @b: i32*, [1 < 2]
  let %22: i32 = load %21: i32*
  let %23: i32 = add %20: i32, %22: i32
  let %24: () = call @putint, %23: i32
  let %25: () = call @putch, 32
  let %26: i32 = load @i: i32*
  let %27: () = call @putint, %26: i32
  let %28: () = call @putch, 32
  let %i: i32* = alloca i32, 1
  let %30: () = store 0, %i: i32*
  jmp label %while_cond.1
%while_cond.1:
  let %34: i32 = load %i: i32*
  let %35: i32 = lt %34: i32, 12
  br %35: i32, label %while_body.1, label %while_end.1
%while_body.1:
  let %36: i32 = load %i: i32*
  let %37: i32 = div %36: i32, 3
  let %38: i32 = load %i: i32*
  let %39: i32 = rem %38: i32, 3
  let %40: i32* = offset i32, @c: i32*, [%37: i32 < 4], [%39: i32 < 3]
  let %41: () = store 0, %40: i32*
  let %42: i32 = load %i: i32*
  let %43: i32 = add %42: i32, 1
  let %44: () = store %43: i32, %i: i32*
  jmp label %while_cond.1
%while_end.1:
  let %45: i32* = offset i32, @c: i32*, [0 < 4], [0 < 3]
  let %46: () = store 1, %45: i32*
  let %47: i32* = offset i32, @c: i32*, [0 < 4], [1 < 3]
  let %48: () = store 1, %47: i32*
  let %49: i32* = offset i32, @c: i32*, [0 < 4], [2 < 3]
  let %50: () = store 4, %49: i32*
  let %51: i32* = offset i32, @c: i32*, [1 < 4], [0 < 3]
  let %52: () = store 5, %51: i32*
  let %53: i32* = offset i32, @c: i32*, [2 < 4], [0 < 3]
  let %54: () = store 1, %53: i32*
  let %55: i32* = offset i32, @c: i32*, [3 < 4], [0 < 3]
  let %56: () = store 4, %55: i32*
  let %57: () = store 0, %i: i32*
  jmp label %while_cond.2
%while_cond.2:
  let %61: i32 = load %i: i32*
  let %62: i32 = lt %61: i32, 12
  br %62: i32, label %while_body.2, label %while_end.2
%while_body.2:
  let %63: i32 = load %i: i32*
  let %64: i32 = div %63: i32, 3
  let %65: i32 = load %i: i32*
  let %66: i32 = rem %65: i32, 3
  let %67: i32* = offset i32, @c: i32*, [%64: i32 < 4], [%66: i32 < 3]
  let %68: i32 = load %67: i32*
  let %69: () = call @putint, %68: i32
  let %70: () = call @putch, 32
  let %71: i32 = load %i: i32*
  let %72: i32 = add %71: i32, 1
  let %73: () = store %72: i32, %i: i32*
  jmp label %while_cond.2
%while_end.2:
  let %74: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %77: i32 = load %ret_val.addr: i32*
  ret %77: i32
}


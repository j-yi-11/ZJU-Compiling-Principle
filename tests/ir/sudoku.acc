@a: region i32, 81 

fn @putint(#x: i32) -> ();

fn @putch(#x: i32) -> ();

fn @putarray(#n: i32, #arr: i32*) -> ();

fn @getint() -> i32;

fn @getch() -> i32;

fn @getarray(#n: i32, #arr: i32*) -> ();

fn @check_sudoku(#a: i32*) -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %i: i32* = alloca i32, 1
  let %j: i32* = alloca i32, 1
  let %k: i32* = alloca i32, 1
  let %b: i32* = alloca i32, 9
  let %7: () = store 0, %i: i32*
  jmp label %while_cond
%while_cond:
  let %11: i32 = load %i: i32*
  let %12: i32 = lt %11: i32, 9
  br %12: i32, label %while_body, label %while_end
%while_body:
  let %13: () = store 0, %j: i32*
  jmp label %while_cond.1
%while_end:
  let %63: () = store 0, %i: i32*
  jmp label %while_cond.3
%while_cond.1:
  let %17: i32 = load %j: i32*
  let %18: i32 = lt %17: i32, 9
  br %18: i32, label %while_body.1, label %while_end.1
%while_body.1:
  let %19: i32 = load %j: i32*
  let %20: i32* = offset i32, %b: i32*, [%19: i32 < 9]
  let %21: () = store 0, %20: i32*
  let %22: i32 = load %j: i32*
  let %23: i32 = add %22: i32, 1
  let %24: () = store %23: i32, %j: i32*
  jmp label %while_cond.1
%while_end.1:
  let %25: () = store 0, %j: i32*
  jmp label %while_cond.2
%while_cond.2:
  let %29: i32 = load %j: i32*
  let %30: i32 = lt %29: i32, 9
  br %30: i32, label %while_body.2, label %while_end.2
%while_body.2:
  let %31: i32 = load %i: i32*
  let %32: i32 = load %j: i32*
  let %33: i32* = offset i32, #a: i32*, [%31: i32 < none], [%32: i32 < 9]
  let %34: i32 = load %33: i32*
  br %34: i32, label %if_then, label %if_end
%while_end.2:
  let %60: i32 = load %i: i32*
  let %61: i32 = add %60: i32, 1
  let %62: () = store %61: i32, %i: i32*
  jmp label %while_cond
%if_then:
  let %37: i32 = load %i: i32*
  let %38: i32 = load %j: i32*
  let %39: i32* = offset i32, #a: i32*, [%37: i32 < none], [%38: i32 < 9]
  let %40: i32 = load %39: i32*
  let %41: i32 = sub %40: i32, 1
  let %42: i32* = offset i32, %b: i32*, [%41: i32 < 9]
  let %43: i32 = load %42: i32*
  let %44: i32 = eq 0, %43: i32
  br %44: i32, label %if_then.1, label %if_else
%if_end:
  let %57: i32 = load %j: i32*
  let %58: i32 = add %57: i32, 1
  let %59: () = store %58: i32, %j: i32*
  jmp label %while_cond.2
%if_then.1:
  let %48: i32 = load %i: i32*
  let %49: i32 = load %j: i32*
  let %50: i32* = offset i32, #a: i32*, [%48: i32 < none], [%49: i32 < 9]
  let %51: i32 = load %50: i32*
  let %52: i32 = sub %51: i32, 1
  let %53: i32* = offset i32, %b: i32*, [%52: i32 < 9]
  let %54: () = store 1, %53: i32*
  jmp label %if_end.1
%if_end.1:
  jmp label %if_end
%if_else:
  let %55: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %if_end.1
%while_cond.3:
  let %67: i32 = load %i: i32*
  let %68: i32 = lt %67: i32, 9
  br %68: i32, label %while_body.3, label %while_end.3
%while_body.3:
  let %69: () = store 0, %j: i32*
  jmp label %while_cond.4
%while_end.3:
  let %119: () = store 0, %i: i32*
  jmp label %while_cond.6
%while_cond.4:
  let %73: i32 = load %j: i32*
  let %74: i32 = lt %73: i32, 9
  br %74: i32, label %while_body.4, label %while_end.4
%while_body.4:
  let %75: i32 = load %j: i32*
  let %76: i32* = offset i32, %b: i32*, [%75: i32 < 9]
  let %77: () = store 0, %76: i32*
  let %78: i32 = load %j: i32*
  let %79: i32 = add %78: i32, 1
  let %80: () = store %79: i32, %j: i32*
  jmp label %while_cond.4
%while_end.4:
  let %81: () = store 0, %j: i32*
  jmp label %while_cond.5
%while_cond.5:
  let %85: i32 = load %j: i32*
  let %86: i32 = lt %85: i32, 9
  br %86: i32, label %while_body.5, label %while_end.5
%while_body.5:
  let %87: i32 = load %j: i32*
  let %88: i32 = load %i: i32*
  let %89: i32* = offset i32, #a: i32*, [%87: i32 < none], [%88: i32 < 9]
  let %90: i32 = load %89: i32*
  br %90: i32, label %if_then.2, label %if_end.2
%while_end.5:
  let %116: i32 = load %i: i32*
  let %117: i32 = add %116: i32, 1
  let %118: () = store %117: i32, %i: i32*
  jmp label %while_cond.3
%if_then.2:
  let %93: i32 = load %j: i32*
  let %94: i32 = load %i: i32*
  let %95: i32* = offset i32, #a: i32*, [%93: i32 < none], [%94: i32 < 9]
  let %96: i32 = load %95: i32*
  let %97: i32 = sub %96: i32, 1
  let %98: i32* = offset i32, %b: i32*, [%97: i32 < 9]
  let %99: i32 = load %98: i32*
  let %100: i32 = eq 0, %99: i32
  br %100: i32, label %if_then.3, label %if_else.1
%if_end.2:
  let %113: i32 = load %j: i32*
  let %114: i32 = add %113: i32, 1
  let %115: () = store %114: i32, %j: i32*
  jmp label %while_cond.5
%if_then.3:
  let %104: i32 = load %j: i32*
  let %105: i32 = load %i: i32*
  let %106: i32* = offset i32, #a: i32*, [%104: i32 < none], [%105: i32 < 9]
  let %107: i32 = load %106: i32*
  let %108: i32 = sub %107: i32, 1
  let %109: i32* = offset i32, %b: i32*, [%108: i32 < 9]
  let %110: () = store 1, %109: i32*
  jmp label %if_end.3
%if_end.3:
  jmp label %if_end.2
%if_else.1:
  let %111: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%after_return.1:
  jmp label %if_end.3
%while_cond.6:
  let %123: i32 = load %i: i32*
  let %124: i32 = lt %123: i32, 3
  br %124: i32, label %while_body.6, label %while_end.6
%while_body.6:
  let %125: () = store 0, %j: i32*
  jmp label %while_cond.7
%while_end.6:
  let %197: () = store 1, %ret_val.addr: i32*
  jmp label %exit
%while_cond.7:
  let %129: i32 = load %j: i32*
  let %130: i32 = lt %129: i32, 3
  br %130: i32, label %while_body.7, label %while_end.7
%while_body.7:
  let %131: () = store 0, %k: i32*
  jmp label %while_cond.8
%while_end.7:
  let %194: i32 = load %i: i32*
  let %195: i32 = add %194: i32, 1
  let %196: () = store %195: i32, %i: i32*
  jmp label %while_cond.6
%while_cond.8:
  let %135: i32 = load %k: i32*
  let %136: i32 = lt %135: i32, 9
  br %136: i32, label %while_body.8, label %while_end.8
%while_body.8:
  let %137: i32 = load %k: i32*
  let %138: i32* = offset i32, %b: i32*, [%137: i32 < 9]
  let %139: () = store 0, %138: i32*
  let %140: i32 = load %k: i32*
  let %141: i32 = add %140: i32, 1
  let %142: () = store %141: i32, %k: i32*
  jmp label %while_cond.8
%while_end.8:
  let %143: () = store 0, %k: i32*
  jmp label %while_cond.9
%while_cond.9:
  let %147: i32 = load %k: i32*
  let %148: i32 = lt %147: i32, 3
  br %148: i32, label %while_body.9, label %while_end.9
%while_body.9:
  let %l: i32* = alloca i32, 1
  let %150: () = store 0, %l: i32*
  jmp label %while_cond.10
%while_end.9:
  let %191: i32 = load %j: i32*
  let %192: i32 = add %191: i32, 1
  let %193: () = store %192: i32, %j: i32*
  jmp label %while_cond.7
%while_cond.10:
  let %154: i32 = load %l: i32*
  let %155: i32 = lt %154: i32, 3
  br %155: i32, label %while_body.10, label %while_end.10
%while_body.10:
  let %m: i32* = alloca i32, 1
  let %157: i32 = load %i: i32*
  let %158: i32 = mul %157: i32, 3
  let %159: i32 = load %k: i32*
  let %160: i32 = add %158: i32, %159: i32
  let %161: i32 = load %j: i32*
  let %162: i32 = mul %161: i32, 3
  let %163: i32 = load %l: i32*
  let %164: i32 = add %162: i32, %163: i32
  let %165: i32* = offset i32, #a: i32*, [%160: i32 < none], [%164: i32 < 9]
  let %166: i32 = load %165: i32*
  let %167: () = store %166: i32, %m: i32*
  let %168: i32 = load %m: i32*
  br %168: i32, label %if_then.4, label %if_end.4
%while_end.10:
  let %188: i32 = load %k: i32*
  let %189: i32 = add %188: i32, 1
  let %190: () = store %189: i32, %k: i32*
  jmp label %while_cond.9
%if_then.4:
  let %171: i32 = load %m: i32*
  let %172: i32 = sub %171: i32, 1
  let %173: i32* = offset i32, %b: i32*, [%172: i32 < 9]
  let %174: i32 = load %173: i32*
  let %175: i32 = eq 0, %174: i32
  br %175: i32, label %if_then.5, label %if_else.2
%if_end.4:
  let %185: i32 = load %l: i32*
  let %186: i32 = add %185: i32, 1
  let %187: () = store %186: i32, %l: i32*
  jmp label %while_cond.10
%if_then.5:
  let %179: i32 = load %m: i32*
  let %180: i32 = sub %179: i32, 1
  let %181: i32* = offset i32, %b: i32*, [%180: i32 < 9]
  let %182: () = store 1, %181: i32*
  jmp label %if_end.5
%if_end.5:
  jmp label %if_end.4
%if_else.2:
  let %183: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%after_return.2:
  jmp label %if_end.5
%after_return.3:
  jmp label %exit
%exit:
  let %200: i32 = load %ret_val.addr: i32*
  ret %200: i32
}

fn @solve_sudoku() -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %i: i32* = alloca i32, 1
  let %j: i32* = alloca i32, 1
  let %solve_i: i32* = alloca i32, 1
  let %solve_j: i32* = alloca i32, 1
  let %done: i32* = alloca i32, 1
  let %8: () = store 1, %done: i32*
  let %9: () = store 0, %i: i32*
  jmp label %while_cond
%while_cond:
  let %13: i32 = load %i: i32*
  let %14: i32 = lt %13: i32, 9
  let %short_val.addr: i32* = alloca i32, 1
  let %16: () = store %14: i32, %short_val.addr: i32*
  br %14: i32, label %short.rhs, label %short.end
%while_body:
  let %22: () = store 0, %j: i32*
  jmp label %while_cond.1
%while_end:
  let %53: i32 = load %done: i32*
  br %53: i32, label %if_then.1, label %if_end.1
%short.rhs:
  let %19: i32 = load %done: i32*
  let %20: () = store %19: i32, %short_val.addr: i32*
  jmp label %short.end
%short.end:
  let %21: i32 = load %short_val.addr: i32*
  br %21: i32, label %while_body, label %while_end
%while_cond.1:
  let %26: i32 = load %j: i32*
  let %27: i32 = lt %26: i32, 9
  let %short_val.addr.1: i32* = alloca i32, 1
  let %29: () = store %27: i32, %short_val.addr.1: i32*
  br %27: i32, label %short.rhs.1, label %short.end.1
%while_body.1:
  let %35: i32 = load %i: i32*
  let %36: i32 = load %j: i32*
  let %37: i32* = offset i32, @a: i32*, [%35: i32 < 9], [%36: i32 < 9]
  let %38: i32 = load %37: i32*
  let %39: i32 = eq %38: i32, 0
  br %39: i32, label %if_then, label %if_end
%while_end.1:
  let %50: i32 = load %i: i32*
  let %51: i32 = add %50: i32, 1
  let %52: () = store %51: i32, %i: i32*
  jmp label %while_cond
%short.rhs.1:
  let %32: i32 = load %done: i32*
  let %33: () = store %32: i32, %short_val.addr.1: i32*
  jmp label %short.end.1
%short.end.1:
  let %34: i32 = load %short_val.addr.1: i32*
  br %34: i32, label %while_body.1, label %while_end.1
%if_then:
  let %42: () = store 0, %done: i32*
  let %43: i32 = load %i: i32*
  let %44: () = store %43: i32, %solve_i: i32*
  let %45: i32 = load %j: i32*
  let %46: () = store %45: i32, %solve_j: i32*
  jmp label %if_end
%if_end:
  let %47: i32 = load %j: i32*
  let %48: i32 = add %47: i32, 1
  let %49: () = store %48: i32, %j: i32*
  jmp label %while_cond.1
%if_then.1:
  let %56: i32 = call @check_sudoku, @a: i32*
  let %57: () = store %56: i32, %ret_val.addr: i32*
  jmp label %exit
%if_end.1:
  let %59: () = store 1, %i: i32*
  jmp label %while_cond.2
%after_return:
  jmp label %if_end.1
%while_cond.2:
  let %63: i32 = load %i: i32*
  let %64: i32 = le %63: i32, 9
  br %64: i32, label %while_body.2, label %while_end.2
%while_body.2:
  let %65: i32 = load %i: i32*
  let %66: i32 = load %solve_i: i32*
  let %67: i32 = load %solve_j: i32*
  let %68: i32* = offset i32, @a: i32*, [%66: i32 < 9], [%67: i32 < 9]
  let %69: () = store %65: i32, %68: i32*
  let %70: i32 = call @check_sudoku, @a: i32*
  br %70: i32, label %if_then.2, label %if_end.2
%while_end.2:
  let %81: i32 = load %solve_i: i32*
  let %82: i32 = load %solve_j: i32*
  let %83: i32* = offset i32, @a: i32*, [%81: i32 < 9], [%82: i32 < 9]
  let %84: () = store 0, %83: i32*
  let %85: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%if_then.2:
  let %73: i32 = call @solve_sudoku
  br %73: i32, label %if_then.3, label %if_end.3
%if_end.2:
  let %78: i32 = load %i: i32*
  let %79: i32 = add %78: i32, 1
  let %80: () = store %79: i32, %i: i32*
  jmp label %while_cond.2
%if_then.3:
  let %76: () = store 1, %ret_val.addr: i32*
  jmp label %exit
%if_end.3:
  jmp label %if_end.2
%after_return.1:
  jmp label %if_end.3
%after_return.2:
  jmp label %exit
%exit:
  let %88: i32 = load %ret_val.addr: i32*
  ret %88: i32
}

fn @main() -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %i: i32* = alloca i32, 1
  let %4: () = store 0, %i: i32*
  let %j: i32* = alloca i32, 1
  let %6: () = store 0, %j: i32*
  let %solve: i32* = alloca i32, 1
  let %8: () = store 0, %solve: i32*
  jmp label %while_cond
%while_cond:
  let %12: i32 = load %i: i32*
  let %13: i32 = lt %12: i32, 9
  br %13: i32, label %while_body, label %while_end
%while_body:
  let %14: () = store 0, %j: i32*
  jmp label %while_cond.1
%while_end:
  let %62: i32 = load %solve: i32*
  br %62: i32, label %if_then.2, label %if_else.1
%while_cond.1:
  let %18: i32 = load %j: i32*
  let %19: i32 = lt %18: i32, 9
  br %19: i32, label %while_body.1, label %while_end.1
%while_body.1:
  let %20: i32 = call @getint
  let %21: i32 = load %i: i32*
  let %22: i32 = load %j: i32*
  let %23: i32* = offset i32, @a: i32*, [%21: i32 < 9], [%22: i32 < 9]
  let %24: () = store %20: i32, %23: i32*
  let %25: i32 = load %i: i32*
  let %26: i32 = load %j: i32*
  let %27: i32* = offset i32, @a: i32*, [%25: i32 < 9], [%26: i32 < 9]
  let %28: i32 = load %27: i32*
  let %29: i32 = lt %28: i32, 0
  let %short_val.addr: i32* = alloca i32, 1
  let %31: () = store %29: i32, %short_val.addr: i32*
  br %29: i32, label %short.end, label %short.rhs
%while_end.1:
  let %59: i32 = load %i: i32*
  let %60: i32 = add %59: i32, 1
  let %61: () = store %60: i32, %i: i32*
  jmp label %while_cond
%short.rhs:
  let %34: i32 = load %i: i32*
  let %35: i32 = load %j: i32*
  let %36: i32* = offset i32, @a: i32*, [%34: i32 < 9], [%35: i32 < 9]
  let %37: i32 = load %36: i32*
  let %38: i32 = gt %37: i32, 9
  let %39: () = store %38: i32, %short_val.addr: i32*
  jmp label %short.end
%short.end:
  let %40: i32 = load %short_val.addr: i32*
  br %40: i32, label %if_then, label %if_else
%if_then:
  let %44: () = call @putint, 0
  let %45: () = call @putch, 32
  let %46: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%if_end:
  let %56: i32 = load %j: i32*
  let %57: i32 = add %56: i32, 1
  let %58: () = store %57: i32, %j: i32*
  jmp label %while_cond.1
%if_else:
  let %48: i32 = load %i: i32*
  let %49: i32 = load %j: i32*
  let %50: i32* = offset i32, @a: i32*, [%48: i32 < 9], [%49: i32 < 9]
  let %51: i32 = load %50: i32*
  let %52: i32 = eq %51: i32, 0
  br %52: i32, label %if_then.1, label %if_end.1
%after_return:
  jmp label %if_end
%if_then.1:
  let %55: () = store 1, %solve: i32*
  jmp label %if_end.1
%if_end.1:
  jmp label %if_end
%if_then.2:
  let %66: i32 = call @solve_sudoku
  br %66: i32, label %if_then.3, label %if_else.2
%if_end.2:
  let %104: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%if_else.1:
  let %96: i32 = call @check_sudoku, @a: i32*
  br %96: i32, label %if_then.4, label %if_else.3
%if_then.3:
  let %70: () = store 0, %i: i32*
  jmp label %while_cond.2
%if_end.3:
  jmp label %if_end.2
%if_else.2:
  let %94: () = call @putint, 0
  let %95: () = call @putch, 32
  jmp label %if_end.3
%while_cond.2:
  let %74: i32 = load %i: i32*
  let %75: i32 = lt %74: i32, 9
  br %75: i32, label %while_body.2, label %while_end.2
%while_body.2:
  let %76: () = store 0, %j: i32*
  jmp label %while_cond.3
%while_end.2:
  jmp label %if_end.3
%while_cond.3:
  let %80: i32 = load %j: i32*
  let %81: i32 = lt %80: i32, 9
  br %81: i32, label %while_body.3, label %while_end.3
%while_body.3:
  let %82: i32 = load %i: i32*
  let %83: i32 = load %j: i32*
  let %84: i32* = offset i32, @a: i32*, [%82: i32 < 9], [%83: i32 < 9]
  let %85: i32 = load %84: i32*
  let %86: () = call @putint, %85: i32
  let %87: () = call @putch, 32
  let %88: i32 = load %j: i32*
  let %89: i32 = add %88: i32, 1
  let %90: () = store %89: i32, %j: i32*
  jmp label %while_cond.3
%while_end.3:
  let %91: i32 = load %i: i32*
  let %92: i32 = add %91: i32, 1
  let %93: () = store %92: i32, %i: i32*
  jmp label %while_cond.2
%if_then.4:
  let %100: () = call @putint, 1
  let %101: () = call @putch, 32
  jmp label %if_end.4
%if_end.4:
  jmp label %if_end.2
%if_else.3:
  let %102: () = call @putint, 0
  let %103: () = call @putch, 32
  jmp label %if_end.4
%after_return.1:
  jmp label %exit
%exit:
  let %107: i32 = load %ret_val.addr: i32*
  ret %107: i32
}


fn @putint(#x: i32) -> ();

fn @putch(#x: i32) -> ();

fn @putarray(#n: i32, #arr: i32*) -> ();

fn @getint() -> i32;

fn @getch() -> i32;

fn @getarray(#n: i32, #arr: i32*) -> ();

fn @initW(#w: i32*) -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %3: i32* = offset i32, #w: i32*, [0 < none]
  let %4: () = store 0, %3: i32*
  let %5: i32* = offset i32, #w: i32*, [1 < none]
  let %6: () = store 1, %5: i32*
  let %7: i32* = offset i32, #w: i32*, [2 < none]
  let %8: () = store 2, %7: i32*
  let %9: i32* = offset i32, #w: i32*, [3 < none]
  let %10: () = store 5, %9: i32*
  let %11: i32* = offset i32, #w: i32*, [4 < none]
  let %12: () = store 6, %11: i32*
  let %13: i32* = offset i32, #w: i32*, [5 < none]
  let %14: () = store 7, %13: i32*
  let %15: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %18: i32 = load %ret_val.addr: i32*
  ret %18: i32
}

fn @initV(#v: i32*) -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %3: i32* = offset i32, #v: i32*, [0 < none]
  let %4: () = store 0, %3: i32*
  let %5: i32* = offset i32, #v: i32*, [1 < none]
  let %6: () = store 1, %5: i32*
  let %7: i32* = offset i32, #v: i32*, [2 < none]
  let %8: () = store 6, %7: i32*
  let %9: i32* = offset i32, #v: i32*, [3 < none]
  let %10: () = store 18, %9: i32*
  let %11: i32* = offset i32, #v: i32*, [4 < none]
  let %12: () = store 22, %11: i32*
  let %13: i32* = offset i32, #v: i32*, [5 < none]
  let %14: () = store 28, %13: i32*
  let %15: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %18: i32 = load %ret_val.addr: i32*
  ret %18: i32
}

fn @main() -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %weight: i32* = alloca i32, 6
  let %value: i32* = alloca i32, 6
  let %results: i32* = alloca i32, 72
  let %r_i: i32* = alloca i32, 1
  let %r_j: i32* = alloca i32, 1
  let %ki: i32* = alloca i32, 1
  let %kj: i32* = alloca i32, 1
  let %10: i32 = call @initW, %weight: i32*
  let %11: i32 = call @initV, %value: i32*
  let %12: () = store 0, %r_i: i32*
  jmp label %while_cond
%while_cond:
  let %16: i32 = load %r_i: i32*
  let %17: i32 = lt %16: i32, 6
  br %17: i32, label %while_body, label %while_end
%while_body:
  let %18: () = store 0, %r_j: i32*
  jmp label %while_cond.1
%while_end:
  let %34: () = store 1, %ki: i32*
  jmp label %while_cond.2
%while_cond.1:
  let %22: i32 = load %r_j: i32*
  let %23: i32 = lt %22: i32, 12
  br %23: i32, label %while_body.1, label %while_end.1
%while_body.1:
  let %24: i32 = load %r_i: i32*
  let %25: i32 = load %r_j: i32*
  let %26: i32* = offset i32, %results: i32*, [%24: i32 < 6], [%25: i32 < 12]
  let %27: () = store 0, %26: i32*
  let %28: i32 = load %r_j: i32*
  let %29: i32 = add %28: i32, 1
  let %30: () = store %29: i32, %r_j: i32*
  jmp label %while_cond.1
%while_end.1:
  let %31: i32 = load %r_i: i32*
  let %32: i32 = add %31: i32, 1
  let %33: () = store %32: i32, %r_i: i32*
  jmp label %while_cond
%while_cond.2:
  let %38: i32 = load %ki: i32*
  let %39: i32 = lt %38: i32, 6
  br %39: i32, label %while_body.2, label %while_end.2
%while_body.2:
  let %40: () = store 1, %kj: i32*
  jmp label %while_cond.3
%while_end.2:
  let %117: i32* = offset i32, %results: i32*, [5 < 6], [11 < 12]
  let %118: i32 = load %117: i32*
  let %119: () = call @putint, %118: i32
  let %120: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%while_cond.3:
  let %44: i32 = load %kj: i32*
  let %45: i32 = lt %44: i32, 12
  br %45: i32, label %while_body.3, label %while_end.3
%while_body.3:
  let %46: i32 = load %kj: i32*
  let %47: i32 = load %ki: i32*
  let %48: i32* = offset i32, %weight: i32*, [%47: i32 < 6]
  let %49: i32 = load %48: i32*
  let %50: i32 = lt %46: i32, %49: i32
  br %50: i32, label %if_then, label %if_else
%while_end.3:
  let %114: i32 = load %ki: i32*
  let %115: i32 = add %114: i32, 1
  let %116: () = store %115: i32, %ki: i32*
  jmp label %while_cond.2
%if_then:
  let %54: i32 = load %ki: i32*
  let %55: i32 = sub %54: i32, 1
  let %56: i32 = load %kj: i32*
  let %57: i32* = offset i32, %results: i32*, [%55: i32 < 6], [%56: i32 < 12]
  let %58: i32 = load %57: i32*
  let %59: i32 = load %ki: i32*
  let %60: i32 = load %kj: i32*
  let %61: i32* = offset i32, %results: i32*, [%59: i32 < 6], [%60: i32 < 12]
  let %62: () = store %58: i32, %61: i32*
  jmp label %if_end
%if_end:
  let %111: i32 = load %kj: i32*
  let %112: i32 = add %111: i32, 1
  let %113: () = store %112: i32, %kj: i32*
  jmp label %while_cond.3
%if_else:
  let %63: i32 = load %ki: i32*
  let %64: i32 = sub %63: i32, 1
  let %65: i32 = load %kj: i32*
  let %66: i32* = offset i32, %results: i32*, [%64: i32 < 6], [%65: i32 < 12]
  let %67: i32 = load %66: i32*
  let %68: i32 = load %ki: i32*
  let %69: i32* = offset i32, %value: i32*, [%68: i32 < 6]
  let %70: i32 = load %69: i32*
  let %71: i32 = load %ki: i32*
  let %72: i32 = sub %71: i32, 1
  let %73: i32 = load %kj: i32*
  let %74: i32 = load %ki: i32*
  let %75: i32* = offset i32, %weight: i32*, [%74: i32 < 6]
  let %76: i32 = load %75: i32*
  let %77: i32 = sub %73: i32, %76: i32
  let %78: i32* = offset i32, %results: i32*, [%72: i32 < 6], [%77: i32 < 12]
  let %79: i32 = load %78: i32*
  let %80: i32 = add %70: i32, %79: i32
  let %81: i32 = gt %67: i32, %80: i32
  br %81: i32, label %if_then.1, label %if_else.1
%if_then.1:
  let %85: i32 = load %ki: i32*
  let %86: i32 = sub %85: i32, 1
  let %87: i32 = load %kj: i32*
  let %88: i32* = offset i32, %results: i32*, [%86: i32 < 6], [%87: i32 < 12]
  let %89: i32 = load %88: i32*
  let %90: i32 = load %ki: i32*
  let %91: i32 = load %kj: i32*
  let %92: i32* = offset i32, %results: i32*, [%90: i32 < 6], [%91: i32 < 12]
  let %93: () = store %89: i32, %92: i32*
  jmp label %if_end.1
%if_end.1:
  jmp label %if_end
%if_else.1:
  let %94: i32 = load %ki: i32*
  let %95: i32* = offset i32, %value: i32*, [%94: i32 < 6]
  let %96: i32 = load %95: i32*
  let %97: i32 = load %ki: i32*
  let %98: i32 = sub %97: i32, 1
  let %99: i32 = load %kj: i32*
  let %100: i32 = load %ki: i32*
  let %101: i32* = offset i32, %weight: i32*, [%100: i32 < 6]
  let %102: i32 = load %101: i32*
  let %103: i32 = sub %99: i32, %102: i32
  let %104: i32* = offset i32, %results: i32*, [%98: i32 < 6], [%103: i32 < 12]
  let %105: i32 = load %104: i32*
  let %106: i32 = add %96: i32, %105: i32
  let %107: i32 = load %ki: i32*
  let %108: i32 = load %kj: i32*
  let %109: i32* = offset i32, %results: i32*, [%107: i32 < 6], [%108: i32 < 12]
  let %110: () = store %106: i32, %109: i32*
  jmp label %if_end.1
%after_return:
  jmp label %exit
%exit:
  let %123: i32 = load %ret_val.addr: i32*
  ret %123: i32
}


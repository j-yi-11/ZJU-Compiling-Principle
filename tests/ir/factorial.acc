fn @putint(#x: i32) -> ();

fn @putch(#x: i32) -> ();

fn @putarray(#n: i32, #arr: i32*) -> ();

fn @getint() -> i32;

fn @getch() -> i32;

fn @getarray(#n: i32, #arr: i32*) -> ();

fn @factorial(#n: i32) -> i32 {
%entry:
  let %n.addr: i32* = alloca i32, 1
  let %3: () = store #n: i32, %n.addr: i32*
  let %ret_val.addr: i32* = alloca i32, 1
  let %5: i32 = load %n.addr: i32*
  let %6: i32 = eq %5: i32, 0
  br %6: i32, label %if_then, label %if_end
%if_then:
  let %9: () = store 1, %ret_val.addr: i32*
  jmp label %exit
%if_end:
  let %11: i32 = load %n.addr: i32*
  let %12: i32 = load %n.addr: i32*
  let %13: i32 = sub %12: i32, 1
  let %14: i32 = call @factorial, %13: i32
  let %15: i32 = mul %11: i32, %14: i32
  let %16: () = store %15: i32, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %if_end
%after_return.1:
  jmp label %exit
%exit:
  let %19: i32 = load %ret_val.addr: i32*
  ret %19: i32
}

fn @main() -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %n: i32* = alloca i32, 1
  let %4: i32 = call @getint
  let %5: () = store %4: i32, %n: i32*
  let %result: i32* = alloca i32, 1
  let %7: i32 = load %n: i32*
  let %8: i32 = call @factorial, %7: i32
  let %9: () = store %8: i32, %result: i32*
  let %10: i32 = load %result: i32*
  let %11: () = call @putint, %10: i32
  let %12: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %15: i32 = load %ret_val.addr: i32*
  ret %15: i32
}


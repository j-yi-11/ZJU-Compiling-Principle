fn @putint(#x: i32) -> ();

fn @putch(#x: i32) -> ();

fn @putarray(#n: i32, #arr: i32*) -> ();

fn @getint() -> i32;

fn @getch() -> i32;

fn @getarray(#n: i32, #arr: i32*) -> ();

fn @get_one(#a: i32) -> i32 {
%entry:
  let %a.addr: i32* = alloca i32, 1
  let %3: () = store #a: i32, %a.addr: i32*
  let %ret_val.addr: i32* = alloca i32, 1
  let %5: () = store 1, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %8: i32 = load %ret_val.addr: i32*
  ret %8: i32
}

fn @deepWhileBr(#a: i32, #b: i32) -> i32 {
%entry:
  let %a.addr: i32* = alloca i32, 1
  let %3: () = store #a: i32, %a.addr: i32*
  let %b.addr: i32* = alloca i32, 1
  let %5: () = store #b: i32, %b.addr: i32*
  let %ret_val.addr: i32* = alloca i32, 1
  let %c: i32* = alloca i32, 1
  let %8: i32 = load %a.addr: i32*
  let %9: i32 = load %b.addr: i32*
  let %10: i32 = add %8: i32, %9: i32
  let %11: () = store %10: i32, %c: i32*
  jmp label %while_cond
%while_cond:
  let %15: i32 = load %c: i32*
  let %16: i32 = lt %15: i32, 75
  br %16: i32, label %while_body, label %while_end
%while_body:
  let %d: i32* = alloca i32, 1
  let %18: () = store 42, %d: i32*
  let %19: i32 = load %c: i32*
  let %20: i32 = lt %19: i32, 100
  br %20: i32, label %if_then, label %if_end
%while_end:
  let %42: i32 = load %c: i32*
  let %43: () = store %42: i32, %ret_val.addr: i32*
  jmp label %exit
%if_then:
  let %23: i32 = load %c: i32*
  let %24: i32 = load %d: i32*
  let %25: i32 = add %23: i32, %24: i32
  let %26: () = store %25: i32, %c: i32*
  let %27: i32 = load %c: i32*
  let %28: i32 = gt %27: i32, 99
  br %28: i32, label %if_then.1, label %if_end.1
%if_end:
  jmp label %while_cond
%if_then.1:
  let %e: i32* = alloca i32, 1
  let %32: i32 = load %d: i32*
  let %33: i32 = mul %32: i32, 2
  let %34: () = store %33: i32, %e: i32*
  let %35: i32 = call @get_one, 0
  let %36: i32 = eq %35: i32, 1
  br %36: i32, label %if_then.2, label %if_end.2
%if_end.1:
  jmp label %if_end
%if_then.2:
  let %39: i32 = load %e: i32*
  let %40: i32 = mul %39: i32, 2
  let %41: () = store %40: i32, %c: i32*
  jmp label %if_end.2
%if_end.2:
  jmp label %if_end.1
%after_return:
  jmp label %exit
%exit:
  let %46: i32 = load %ret_val.addr: i32*
  ret %46: i32
}

fn @main() -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %p: i32* = alloca i32, 1
  let %4: () = store 2, %p: i32*
  let %5: i32 = load %p: i32*
  let %6: i32 = load %p: i32*
  let %7: i32 = call @deepWhileBr, %5: i32, %6: i32
  let %8: () = store %7: i32, %p: i32*
  let %9: i32 = load %p: i32*
  let %10: () = call @putint, %9: i32
  let %11: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %14: i32 = load %ret_val.addr: i32*
  ret %14: i32
}


fn @putint(#x: i32) -> ();

fn @putch(#x: i32) -> ();

fn @putarray(#n: i32, #arr: i32*) -> ();

fn @getint() -> i32;

fn @getch() -> i32;

fn @getarray(#n: i32, #arr: i32*) -> ();

fn @add(#array: i32*) -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %3: i32* = offset i32, #array: i32*, [0 < none]
  let %4: i32 = load %3: i32*
  let %5: i32 = add %4: i32, 1
  let %6: i32* = offset i32, #array: i32*, [0 < none]
  let %7: () = store %5: i32, %6: i32*
  let %8: () = store 1, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %11: i32 = load %ret_val.addr: i32*
  ret %11: i32
}

fn @main() -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %a: i32* = alloca i32, 1
  let %4: () = store 10, %a: i32*
  let %array: i32* = alloca i32, 10
  let %6: i32* = offset i32, %array: i32*, [0 < 10]
  let %7: () = store 10, %6: i32*
  let %8: i32 = load %a: i32*
  let %9: i32 = gt %8: i32, 10
  let %short_val.addr: i32* = alloca i32, 1
  let %11: () = store %9: i32, %short_val.addr: i32*
  br %9: i32, label %short.rhs, label %short.end
%short.rhs:
  let %14: i32 = call @add, %array: i32*
  let %15: () = store %14: i32, %short_val.addr: i32*
  jmp label %short.end
%short.end:
  let %16: i32 = load %short_val.addr: i32*
  br %16: i32, label %if_then, label %if_else
%if_then:
  let %20: i32* = offset i32, %array: i32*, [0 < 10]
  let %21: i32 = load %20: i32*
  let %22: () = call @putint, %21: i32
  jmp label %if_end
%if_end:
  let %26: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%if_else:
  let %23: i32* = offset i32, %array: i32*, [0 < 10]
  let %24: i32 = load %23: i32*
  let %25: () = call @putint, %24: i32
  jmp label %if_end
%after_return:
  jmp label %exit
%exit:
  let %29: i32 = load %ret_val.addr: i32*
  ret %29: i32
}


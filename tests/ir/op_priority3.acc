fn @putint(#x: i32) -> ();

fn @putch(#x: i32) -> ();

fn @putarray(#n: i32, #arr: i32*) -> ();

fn @getint() -> i32;

fn @getch() -> i32;

fn @getarray(#n: i32, #arr: i32*) -> ();

fn @main() -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %flag: i32* = alloca i32, 1
  let %4: () = store 0, %flag: i32*
  let %a: i32* = alloca i32, 1
  let %6: () = store 1, %a: i32*
  let %b: i32* = alloca i32, 1
  let %8: () = store 0, %b: i32*
  let %c: i32* = alloca i32, 1
  let %10: () = store 1, %c: i32*
  let %d: i32* = alloca i32, 1
  let %12: () = store 2, %d: i32*
  let %e: i32* = alloca i32, 1
  let %14: () = store 4, %e: i32*
  let %15: i32 = load %a: i32*
  let %16: i32 = load %b: i32*
  let %17: i32 = mul %15: i32, %16: i32
  let %18: i32 = load %c: i32*
  let %19: i32 = div %17: i32, %18: i32
  let %20: i32 = load %e: i32*
  let %21: i32 = load %d: i32*
  let %22: i32 = add %20: i32, %21: i32
  let %23: i32 = eq %19: i32, %22: i32
  let %short_val.addr: i32* = alloca i32, 1
  let %25: () = store %23: i32, %short_val.addr: i32*
  br %23: i32, label %short.rhs, label %short.end
%short.rhs:
  let %28: i32 = load %a: i32*
  let %29: i32 = load %a: i32*
  let %30: i32 = load %b: i32*
  let %31: i32 = add %29: i32, %30: i32
  let %32: i32 = mul %28: i32, %31: i32
  let %33: i32 = load %c: i32*
  let %34: i32 = add %32: i32, %33: i32
  let %35: i32 = load %d: i32*
  let %36: i32 = load %e: i32*
  let %37: i32 = add %35: i32, %36: i32
  let %38: i32 = le %34: i32, %37: i32
  let %39: () = store %38: i32, %short_val.addr: i32*
  jmp label %short.end
%short.end:
  let %40: i32 = load %short_val.addr: i32*
  let %short_val.addr.1: i32* = alloca i32, 1
  let %42: () = store %40: i32, %short_val.addr.1: i32*
  br %40: i32, label %short.end.1, label %short.rhs.1
%short.rhs.1:
  let %45: i32 = load %a: i32*
  let %46: i32 = load %b: i32*
  let %47: i32 = load %c: i32*
  let %48: i32 = mul %46: i32, %47: i32
  let %49: i32 = sub %45: i32, %48: i32
  let %50: i32 = load %d: i32*
  let %51: i32 = load %a: i32*
  let %52: i32 = load %c: i32*
  let %53: i32 = div %51: i32, %52: i32
  let %54: i32 = sub %50: i32, %53: i32
  let %55: i32 = eq %49: i32, %54: i32
  let %56: () = store %55: i32, %short_val.addr.1: i32*
  jmp label %short.end.1
%short.end.1:
  let %57: i32 = load %short_val.addr.1: i32*
  br %57: i32, label %if_then, label %if_end
%if_then:
  let %60: () = store 1, %flag: i32*
  jmp label %if_end
%if_end:
  let %61: i32 = load %flag: i32*
  let %62: () = call @putint, %61: i32
  let %63: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %66: i32 = load %ret_val.addr: i32*
  ret %66: i32
}


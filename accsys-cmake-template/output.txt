@a : region i32, 1
@b : region i32, 2
@c : region i32, 12
@i : region i32, 1
fn @putint(#x: i32) -> ();
fn @putch(#x: i32) -> ();
fn @putarray(#n: i32, #arr: i32*) -> ();
fn @getint() -> i32;
fn @getch() -> i32;
fn @getarray(#n: i32, #arr: i32*) -> ();
fn @main() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  jmp label %while_cond
%while_cond:
  let %1 = load @a
  let %2 = lt %1, 2
  br %2, label %while_body, label %while_end
%while_body:
  let %4 = load @a
  let %5 = mul %4, 2
  let %6 = load @a
  let %7 = offset i32, @b, [%6< 2]
  let %8 = store %5, %7
  let %9 = load @a
  let %10 = add %9, 1
  let %11 = store %10, @a
  jmp label %while_cond
%while_end:
  let %13 = load @a
  let %14 = offset i32, @b, [0< 2]
  let %15 = load %14
  let %16 = add %13, %15
  let %17 = offset i32, @b, [1< 2]
  let %18 = load %17
  let %19 = add %16, %18
  let %20 = call @putint, %19
  let %21 = call @putch, 32
  let %22 = load @i
  let %23 = call @putint, %22
  let %24 = call @putch, 32
  let %i = alloca i32, 1
  let %25 = store 0, %i
  jmp label %while_cond.1
%while_cond.1:
  let %27 = load %i
  let %28 = lt %27, 12
  br %28, label %while_body.1, label %while_end.1
%while_body.1:
  let %30 = load %i
  let %31 = div %30, 3
  let %32 = load %i
  let %33 = rem %32, 3
  let %34 = offset i32, @c, [%31< 4], [%33< 3]
  let %35 = store 0, %34
  let %36 = load %i
  let %37 = add %36, 1
  let %38 = store %37, %i
  jmp label %while_cond.1
%while_end.1:
  let %40 = offset i32, @c, [0< 4], [0< 3]
  let %41 = store 1, %40
  let %42 = offset i32, @c, [0< 4], [1< 3]
  let %43 = store 1, %42
  let %44 = offset i32, @c, [0< 4], [2< 3]
  let %45 = store 4, %44
  let %46 = offset i32, @c, [1< 4], [0< 3]
  let %47 = store 5, %46
  let %48 = offset i32, @c, [2< 4], [0< 3]
  let %49 = store 1, %48
  let %50 = offset i32, @c, [3< 4], [0< 3]
  let %51 = store 4, %50
  let %52 = store 0, %i
  jmp label %while_cond.2
%while_cond.2:
  let %54 = load %i
  let %55 = lt %54, 12
  br %55, label %while_body.2, label %while_end.2
%while_body.2:
  let %57 = load %i
  let %58 = div %57, 3
  let %59 = load %i
  let %60 = rem %59, 3
  let %61 = offset i32, @c, [%58< 4], [%60< 3]
  let %62 = load %61
  let %63 = call @putint, %62
  let %64 = call @putch, 32
  let %65 = load %i
  let %66 = add %65, 1
  let %67 = store %66, %i
  jmp label %while_cond.2
%while_end.2:
  let %69 = store 0, %ret_val.addr
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %72 = load %ret_val.addr
  ret %72
}

fn @putint(#x: i32) -> ();

fn @putch(#x: i32) -> ();

fn @putarray(#n: i32, #arr: i32*) -> ();

fn @getint() -> i32;

fn @getch() -> i32;

fn @getarray(#n: i32, #arr: i32*) -> ();

fn @main() -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %a: i32* = alloca i32, 8
  let %4: i32* = offset i32, %a: i32*, [0 < 8]
  let %5: () = store 1, %4: i32*
  let %6: i32* = offset i32, %a: i32*, [1 < 8]
  let %7: () = store 2, %6: i32*
  let %8: i32* = offset i32, %a: i32*, [2 < 8]
  let %9: () = store 3, %8: i32*
  let %10: i32* = offset i32, %a: i32*, [3 < 8]
  let %11: () = store 4, %10: i32*
  let %12: i32* = offset i32, %a: i32*, [4 < 8]
  let %13: () = store 5, %12: i32*
  let %14: i32* = offset i32, %a: i32*, [5 < 8]
  let %15: () = store 6, %14: i32*
  let %16: i32* = offset i32, %a: i32*, [6 < 8]
  let %17: () = store 7, %16: i32*
  let %18: i32* = offset i32, %a: i32*, [7 < 8]
  let %19: () = store 8, %18: i32*
  let %i: i32* = alloca i32, 1
  let %21: () = store 0, %i: i32*
  jmp label %while_cond
%while_cond:
  let %25: i32 = load %i: i32*
  let %26: i32 = lt %25: i32, 8
  br %26: i32, label %while_body, label %while_end
%while_body:
  let %27: i32 = load %i: i32*
  let %28: i32* = offset i32, %a: i32*, [%27: i32 < 8]
  let %29: i32 = load %28: i32*
  let %30: () = call @putint, %29: i32
  let %31: () = call @putch, 32
  let %32: i32 = load %i: i32*
  let %33: i32 = add %32: i32, 1
  let %34: () = store %33: i32, %i: i32*
  jmp label %while_cond
%while_end:
  let %35: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %38: i32 = load %ret_val.addr: i32*
  ret %38: i32
}


fn @putint(#x: i32) -> ();
fn @putch(#x: i32) -> ();
fn @putarray(#n: i32, #arr: i32*) -> ();
fn @getint() -> i32;
fn @getch() -> i32;
fn @getarray(#n: i32, #arr: i32*) -> ();
fn @print_array(#a: i32*, #len: i32) -> () {
%entry:
  let %len.addr = alloca i32, 1
  let %0 = store #len, %len.addr
  let %i = alloca i32, 1
  let %1 = store 0, %i
  jmp label %while_cond
%while_cond:
  let %3 = load %i
  let %4 = load %len.addr
  let %5 = lt %3, %4
  br %5, label %while_body, label %while_end
%while_body:
  let %7 = load %i
  let %8 = offset i32, #a, [%7< none]
  let %9 = load %8
  let %10 = call @putint, %9
  let %11 = call @putch, 32
  let %12 = load %i
  let %13 = add %12, 1
  let %14 = store %13, %i
  jmp label %while_cond
%while_end:
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  ret ()
}
fn @main() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %a = alloca i32, 8
  let %0 = offset i32, %a, [0< 4], [0< 2]
  let %1 = store 1, %0
  let %2 = offset i32, %a, [0< 4], [1< 2]
  let %3 = store 2, %2
  let %4 = offset i32, %a, [1< 4], [0< 2]
  let %5 = store 3, %4
  let %6 = offset i32, %a, [1< 4], [1< 2]
  let %7 = store 4, %6
  let %8 = offset i32, %a, [2< 4], [0< 2]
  let %9 = store 5, %8
  let %10 = offset i32, %a, [2< 4], [1< 2]
  let %11 = store 6, %10
  let %12 = offset i32, %a, [3< 4], [0< 2]
  let %13 = store 7, %12
  let %14 = offset i32, %a, [3< 4], [1< 2]
  let %15 = store 8, %14
  let %16 = offset i32, %a, [2< 4], [0< 2]
  let %17 = call @print_array, %16, 2
  let %18 = offset i32, %a, [1< 4], [0< 2]
  let %19 = call @print_array, %18, 2
  let %20 = offset i32, %a, [0< 4], [0< 2]
  let %21 = call @print_array, %20, 2
  let %22 = offset i32, %a, [3< 4], [0< 2]
  let %23 = call @print_array, %22, 2
  let %24 = store 0, %ret_val.addr
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %27 = load %ret_val.addr
  ret %27
}

fn @putint(#x: i32) -> ();
fn @putch(#x: i32) -> ();
fn @putarray(#n: i32, #arr: i32*) -> ();
fn @getint() -> i32;
fn @getch() -> i32;
fn @getarray(#n: i32, #arr: i32*) -> ();
fn @factorial(#n: i32) -> i32 {
%entry:
  let %n.addr = alloca i32, 1
  let %0 = store #n, %n.addr
  let %ret_val.addr = alloca i32, 1
  let %1 = load %n.addr
  let %2 = eq %1, 0
  br %2, label %if_then, label %if_end
%if_then:
  let %4 = store 1, %ret_val.addr
  jmp label %exit
  jmp label %exit
%if_end:
  let %7 = load %n.addr
  let %8 = load %n.addr
  let %9 = sub %8, 1
  let %10 = call @factorial, %9
  let %11 = mul %7, %10
  let %12 = store %11, %ret_val.addr
  jmp label %exit
  jmp label %exit
%after return:
  jmp label %exit
%exit:
  let %16 = load %ret_val.addr
  ret %16
}
fn @main() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %n = alloca i32, 1
  let %0 = call @getint
  let %1 = store %0, %n
  let %result = alloca i32, 1
  let %2 = load %n
  let %3 = call @factorial, %2
  let %4 = store %3, %result
  let %5 = load %result
  let %6 = call @putint, %5
  let %7 = store 0, %ret_val.addr
  jmp label %exit
  jmp label %exit
%after return:
  jmp label %exit
%exit:
  let %11 = load %ret_val.addr
  ret %11
}

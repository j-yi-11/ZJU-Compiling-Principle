fn @putint(#x: i32) -> ();
fn @putch(#x: i32) -> ();
fn @putarray(#n: i32, #arr: i32*) -> ();
fn @getint() -> i32;
fn @getch() -> i32;
fn @getarray(#n: i32, #arr: i32*) -> ();
fn @main() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %a = alloca i32, 1
  let %b = alloca i32, 1
  let %0 = store 2, %b
  let %c = alloca i32, 1
  let %1 = sub 0, 1
  let %2 = store %1, %c
  let %3 = store 1, %a
  let %4 = load %a
  let %5 = load %b
  let %6 = add %4, %5
  br %6, label %if_then, label %if_end
%if_then:
  let %8 = store 3, %a
  jmp label %if_end
%if_end:
  let %10 = load %c
  let %11 = sub 0, %10
  br %11, label %if_then.1, label %if_end.1
%if_then.1:
  let %13 = store 4, %b
  jmp label %if_end.1
%if_end.1:
  let %15 = load %a
  let %16 = load %b
  let %17 = add %15, %16
  let %18 = load %c
  let %19 = add %17, %18
  let %20 = call @putint, %19
  let %21 = store 0, %ret_val.addr
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %24 = load %ret_val.addr
  ret %24
}

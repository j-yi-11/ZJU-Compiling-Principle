fn @putint(#x: i32) -> ();
fn @putch(#x: i32) -> ();
fn @putarray(#n: i32, #arr: i32*) -> ();
fn @getint() -> i32;
fn @getch() -> i32;
fn @getarray(#n: i32, #arr: i32*) -> ();
fn @get_one(#a: i32) -> i32 {
%entry:
  let %a.addr = alloca i32, 1
  let %0 = store #a, %a.addr
  let %ret_val.addr = alloca i32, 1
  let %1 = store 1, %ret_val.addr
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %4 = load %ret_val.addr
  ret %4
}
fn @deepWhileBr(#a: i32, #b: i32) -> i32 {
%entry:
  let %a.addr = alloca i32, 1
  let %0 = store #a, %a.addr
  let %b.addr = alloca i32, 1
  let %1 = store #b, %b.addr
  let %ret_val.addr = alloca i32, 1
  let %c = alloca i32, 1
  let %2 = load %a.addr
  let %3 = load %b.addr
  let %4 = add %2, %3
  let %5 = store %4, %c
  jmp label %while_cond
%while_cond:
  let %7 = load %c
  let %8 = lt %7, 75
  br %8, label %while_body, label %while_end
%while_body:
  let %d = alloca i32, 1
  let %10 = store 42, %d
  let %11 = load %c
  let %12 = lt %11, 100
  br %12, label %if_then, label %if_end
%while_end:
  let %14 = load %c
  let %15 = store %14, %ret_val.addr
  jmp label %exit
%if_then:
  let %17 = load %c
  let %18 = load %d
  let %19 = add %17, %18
  let %20 = store %19, %c
  let %21 = load %c
  let %22 = gt %21, 99
  br %22, label %if_then.1, label %if_end.1
%if_end:
  jmp label %while_cond
%if_then.1:
  let %e = alloca i32, 1
  let %25 = load %d
  let %26 = mul %25, 2
  let %27 = store %26, %e
  let %28 = call @get_one, 0
  let %29 = eq %28, 1
  br %29, label %if_then.2, label %if_end.2
%if_end.1:
  jmp label %if_end
%if_then.2:
  let %32 = load %e
  let %33 = mul %32, 2
  let %34 = store %33, %c
  jmp label %if_end.2
%if_end.2:
  jmp label %if_end.1
%after_return:
  jmp label %exit
%exit:
  let %38 = load %ret_val.addr
  ret %38
}
fn @main() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %p = alloca i32, 1
  let %0 = store 2, %p
  let %1 = load %p
  let %2 = load %p
  let %3 = call @deepWhileBr, %1, %2
  let %4 = store %3, %p
  let %5 = load %p
  let %6 = call @putint, %5
  let %7 = store 0, %ret_val.addr
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %10 = load %ret_val.addr
  ret %10
}

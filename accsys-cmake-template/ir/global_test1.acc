@a : region i32, 1
@b : region i32, 2
@c : region i32, 12
@i : region i32, 1
fn @putint(#x: i32) -> ();
fn @putch(#x: i32) -> ();
fn @putarray(#n: i32, #arr: i32*) -> ();
fn @getint() -> i32;
fn @getch() -> i32;
fn @getarray(#n: i32, #arr: i32*) -> ();
fn @main() -> i32 {
%entry:
  let %0 = store 2024, @i
  let %ret_val.addr = alloca i32, 1
  jmp label %while_cond
%while_cond:
  let %2 = load @a
  let %3 = lt %2, 2
  br %3, label %while_body, label %while_end
%while_body:
  let %5 = load @a
  let %6 = mul %5, 2
  let %7 = load @a
  let %8 = offset i32, @b, [%7< 2]
  let %9 = store %6, %8
  let %10 = load @a
  let %11 = add %10, 1
  let %12 = store %11, @a
  jmp label %while_cond
%while_end:
  let %14 = load @a
  let %15 = offset i32, @b, [0< 2]
  let %16 = load %15
  let %17 = add %14, %16
  let %18 = offset i32, @b, [1< 2]
  let %19 = load %18
  let %20 = add %17, %19
  let %21 = call @putint, %20
  let %22 = call @putch, 32
  let %23 = load @i
  let %24 = call @putint, %23
  let %25 = call @putch, 32
  let %i = alloca i32, 1
  let %26 = store 0, %i
  jmp label %while_cond.1
%while_cond.1:
  let %28 = load %i
  let %29 = lt %28, 12
  br %29, label %while_body.1, label %while_end.1
%while_body.1:
  let %31 = load %i
  let %32 = div %31, 3
  let %33 = load %i
  let %34 = rem %33, 3
  let %35 = offset i32, @c, [%32< 4], [%34< 3]
  let %36 = store 0, %35
  let %37 = load %i
  let %38 = add %37, 1
  let %39 = store %38, %i
  jmp label %while_cond.1
%while_end.1:
  let %41 = offset i32, @c, [0< 4], [0< 3]
  let %42 = store 1, %41
  let %43 = offset i32, @c, [0< 4], [1< 3]
  let %44 = store 1, %43
  let %45 = offset i32, @c, [0< 4], [2< 3]
  let %46 = store 4, %45
  let %47 = offset i32, @c, [1< 4], [0< 3]
  let %48 = store 5, %47
  let %49 = offset i32, @c, [2< 4], [0< 3]
  let %50 = store 1, %49
  let %51 = offset i32, @c, [3< 4], [0< 3]
  let %52 = store 4, %51
  let %53 = store 0, %i
  jmp label %while_cond.2
%while_cond.2:
  let %55 = load %i
  let %56 = lt %55, 12
  br %56, label %while_body.2, label %while_end.2
%while_body.2:
  let %58 = load %i
  let %59 = div %58, 3
  let %60 = load %i
  let %61 = rem %60, 3
  let %62 = offset i32, @c, [%59< 4], [%61< 3]
  let %63 = load %62
  let %64 = call @putint, %63
  let %65 = call @putch, 32
  let %66 = load %i
  let %67 = add %66, 1
  let %68 = store %67, %i
  jmp label %while_cond.2
%while_end.2:
  let %70 = store 0, %ret_val.addr
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %73 = load %ret_val.addr
  ret %73
}

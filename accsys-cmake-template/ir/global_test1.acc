@a : region i32, 1
@b : region i32, 2
@c : region i32, 12
@i : region i32, 1
fn @putint(#x: i32) -> ();
fn @putch(#x: i32) -> ();
fn @putarray(#n: i32, #arr: i32*) -> ();
fn @getint() -> i32;
fn @getch() -> i32;
fn @getarray(#n: i32, #arr: i32*) -> ();
fn @main() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  jmp label %while_cond
%while_cond:
  let %1 = load @a
  let %2 = lt %1, 2
  br %2, label %while_body, label %while_end
%while_body:
  let %4 = load @a
  let %5 = mul %4, 2
  let %6 = load @a
  let %7 = offset i32, @b, [%6< 2]
  let %8 = load %7
  let %9 = store %5, %8
  let %10 = load @a
  let %11 = add %10, 1
  let %12 = load @a
  let %13 = store %11, %12
  jmp label %while_cond
%while_end:
  let %15 = load @a
  let %16 = offset i32, @b, [0< 2]
  let %17 = load %16
  let %18 = add %15, %17
  let %19 = offset i32, @b, [1< 2]
  let %20 = load %19
  let %21 = add %18, %20
  let %22 = call @putint, %21
  let %23 = call @putch, 32
  let %24 = load @i
  let %25 = call @putint, %24
  let %26 = call @putch, 32
  let %i = alloca i32, 1
  let %27 = store 0, %i
  jmp label %while_cond.1
%while_cond.1:
  let %29 = load %i
  let %30 = lt %29, 12
  br %30, label %while_body.1, label %while_end.1
%while_body.1:
  let %32 = load %i
  let %33 = div %32, 3
  let %34 = load %i
  let %35 = rem %34, 3
  let %36 = offset i32, @c, [%33< 4], [%35< 3]
  let %37 = load %36
  let %38 = store 0, %37
  let %39 = load %i
  let %40 = add %39, 1
  let %41 = load %i
  let %42 = store %40, %41
  jmp label %while_cond.1
%while_end.1:
  let %44 = offset i32, @c, [0< 4], [0< 3]
  let %45 = load %44
  let %46 = store 1, %45
  let %47 = offset i32, @c, [0< 4], [1< 3]
  let %48 = load %47
  let %49 = store 1, %48
  let %50 = offset i32, @c, [0< 4], [2< 3]
  let %51 = load %50
  let %52 = store 4, %51
  let %53 = offset i32, @c, [1< 4], [0< 3]
  let %54 = load %53
  let %55 = store 5, %54
  let %56 = offset i32, @c, [2< 4], [0< 3]
  let %57 = load %56
  let %58 = store 1, %57
  let %59 = offset i32, @c, [3< 4], [0< 3]
  let %60 = load %59
  let %61 = store 4, %60
  let %62 = load %i
  let %63 = store 0, %62
  jmp label %while_cond.2
%while_cond.2:
  let %65 = load %i
  let %66 = lt %65, 12
  br %66, label %while_body.2, label %while_end.2
%while_body.2:
  let %68 = load %i
  let %69 = div %68, 3
  let %70 = load %i
  let %71 = rem %70, 3
  let %72 = offset i32, @c, [%69< 4], [%71< 3]
  let %73 = load %72
  let %74 = call @putint, %73
  let %75 = call @putch, 32
  let %76 = load %i
  let %77 = add %76, 1
  let %78 = load %i
  let %79 = store %77, %78
  jmp label %while_cond.2
%while_end.2:
  let %81 = store 0, %ret_val.addr
  jmp label %exit
  jmp label %exit
%after return:
  jmp label %exit
%exit:
  let %85 = load %ret_val.addr
  ret %85
}

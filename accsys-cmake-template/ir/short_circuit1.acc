fn @putint(#x: i32) -> ();
fn @putch(#x: i32) -> ();
fn @putarray(#n: i32, #arr: i32*) -> ();
fn @getint() -> i32;
fn @getch() -> i32;
fn @getarray(#n: i32, #arr: i32*) -> ();
fn @add(#array: i32*) -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %0 = offset i32, #array, [0< none]
  let %1 = load %0
  let %2 = add %1, 1
  let %3 = offset i32, #array, [0< none]
  let %4 = store %2, %3
  let %5 = store 1, %ret_val.addr
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %8 = load %ret_val.addr
  ret %8
}
fn @main() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %a = alloca i32, 1
  let %0 = store 10, %a
  let %array = alloca i32, 10
  let %1 = offset i32, %array, [0< 10]
  let %2 = store 10, %1
  let %3 = load %a
  let %4 = gt %3, 10
  let %5 = call @add, %array
  let %6 = and %4, %5
  br %6, label %if_then, label %if_else
%if_then:
  let %8 = offset i32, %array, [0< 10]
  let %9 = load %8
  let %10 = call @putint, %9
  jmp label %if_end
%if_end:
  let %12 = store 0, %ret_val.addr
  jmp label %exit
%if_else:
  let %14 = offset i32, %array, [0< 10]
  let %15 = load %14
  let %16 = call @putint, %15
  jmp label %if_end
%after_return:
  jmp label %exit
%exit:
  let %19 = load %ret_val.addr
  ret %19
}

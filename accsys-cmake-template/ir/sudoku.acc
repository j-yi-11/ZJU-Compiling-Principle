@a : region i32, 81
fn @putint(#x: i32) -> ();
fn @putch(#x: i32) -> ();
fn @putarray(#n: i32, #arr: i32*) -> ();
fn @getint() -> i32;
fn @getch() -> i32;
fn @getarray(#n: i32, #arr: i32*) -> ();
fn @check_sudoku(#a: i32*) -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %i = alloca i32, 1
  let %j = alloca i32, 1
  let %k = alloca i32, 1
  let %b = alloca i32, 9
  let %0 = store 0, %i
  jmp label %while_cond
%while_cond:
  let %2 = load %i
  let %3 = lt %2, 9
  br %3, label %while_body, label %while_end
%while_body:
  let %5 = store 0, %j
  jmp label %while_cond.1
%while_end:
  let %7 = store 0, %i
  jmp label %while_cond.3
%while_cond.1:
  let %9 = load %j
  let %10 = lt %9, 9
  br %10, label %while_body.1, label %while_end.1
%while_body.1:
  let %12 = load %j
  let %13 = offset i32, %b, [%12< 9]
  let %14 = store 0, %13
  let %15 = load %j
  let %16 = add %15, 1
  let %17 = store %16, %j
  jmp label %while_cond.1
%while_end.1:
  let %19 = store 0, %j
  jmp label %while_cond.2
%while_cond.2:
  let %21 = load %j
  let %22 = lt %21, 9
  br %22, label %while_body.2, label %while_end.2
%while_body.2:
  let %24 = load %i
  let %25 = load %j
  let %26 = offset i32, #a, [%24< none], [%25< 9]
  let %27 = load %26
  br %27, label %if_then, label %if_end
%while_end.2:
  let %29 = load %i
  let %30 = add %29, 1
  let %31 = store %30, %i
  jmp label %while_cond
%if_then:
  let %33 = load %i
  let %34 = load %j
  let %35 = offset i32, #a, [%33< none], [%34< 9]
  let %36 = load %35
  let %37 = sub %36, 1
  let %38 = offset i32, %b, [%37< 9]
  let %39 = load %38
  let %40 = eq 0, %39
  br %40, label %if_then.1, label %if_else
%if_end:
  let %42 = load %j
  let %43 = add %42, 1
  let %44 = store %43, %j
  jmp label %while_cond.2
%if_then.1:
  let %46 = load %i
  let %47 = load %j
  let %48 = offset i32, #a, [%46< none], [%47< 9]
  let %49 = load %48
  let %50 = sub %49, 1
  let %51 = offset i32, %b, [%50< 9]
  let %52 = store 1, %51
  jmp label %if_end.1
%if_end.1:
  jmp label %if_end
%if_else:
  let %55 = store 0, %ret_val.addr
  jmp label %exit
%while_cond.3:
  let %57 = load %i
  let %58 = lt %57, 9
  br %58, label %while_body.3, label %while_end.3
%while_body.3:
  let %60 = store 0, %j
  jmp label %while_cond.4
%while_end.3:
  let %62 = store 0, %i
  jmp label %while_cond.6
%while_cond.4:
  let %64 = load %j
  let %65 = lt %64, 9
  br %65, label %while_body.4, label %while_end.4
%while_body.4:
  let %67 = load %j
  let %68 = offset i32, %b, [%67< 9]
  let %69 = store 0, %68
  let %70 = load %j
  let %71 = add %70, 1
  let %72 = store %71, %j
  jmp label %while_cond.4
%while_end.4:
  let %74 = store 0, %j
  jmp label %while_cond.5
%while_cond.5:
  let %76 = load %j
  let %77 = lt %76, 9
  br %77, label %while_body.5, label %while_end.5
%while_body.5:
  let %79 = load %j
  let %80 = load %i
  let %81 = offset i32, #a, [%79< none], [%80< 9]
  let %82 = load %81
  br %82, label %if_then.2, label %if_end.2
%while_end.5:
  let %84 = load %i
  let %85 = add %84, 1
  let %86 = store %85, %i
  jmp label %while_cond.3
%if_then.2:
  let %88 = load %j
  let %89 = load %i
  let %90 = offset i32, #a, [%88< none], [%89< 9]
  let %91 = load %90
  let %92 = sub %91, 1
  let %93 = offset i32, %b, [%92< 9]
  let %94 = load %93
  let %95 = eq 0, %94
  br %95, label %if_then.3, label %if_else.1
%if_end.2:
  let %97 = load %j
  let %98 = add %97, 1
  let %99 = store %98, %j
  jmp label %while_cond.5
%if_then.3:
  let %101 = load %j
  let %102 = load %i
  let %103 = offset i32, #a, [%101< none], [%102< 9]
  let %104 = load %103
  let %105 = sub %104, 1
  let %106 = offset i32, %b, [%105< 9]
  let %107 = store 1, %106
  jmp label %if_end.3
%if_end.3:
  jmp label %if_end.2
%if_else.1:
  let %110 = store 0, %ret_val.addr
  jmp label %exit
%while_cond.6:
  let %112 = load %i
  let %113 = lt %112, 3
  br %113, label %while_body.6, label %while_end.6
%while_body.6:
  let %115 = store 0, %j
  jmp label %while_cond.7
%while_end.6:
  let %117 = store 1, %ret_val.addr
  jmp label %exit
%while_cond.7:
  let %119 = load %j
  let %120 = lt %119, 3
  br %120, label %while_body.7, label %while_end.7
%while_body.7:
  let %122 = store 0, %k
  jmp label %while_cond.8
%while_end.7:
  let %124 = load %i
  let %125 = add %124, 1
  let %126 = store %125, %i
  jmp label %while_cond.6
%while_cond.8:
  let %128 = load %k
  let %129 = lt %128, 9
  br %129, label %while_body.8, label %while_end.8
%while_body.8:
  let %131 = load %k
  let %132 = offset i32, %b, [%131< 9]
  let %133 = store 0, %132
  let %134 = load %k
  let %135 = add %134, 1
  let %136 = store %135, %k
  jmp label %while_cond.8
%while_end.8:
  let %138 = store 0, %k
  jmp label %while_cond.9
%while_cond.9:
  let %140 = load %k
  let %141 = lt %140, 3
  br %141, label %while_body.9, label %while_end.9
%while_body.9:
  let %l = alloca i32, 1
  let %143 = store 0, %l
  jmp label %while_cond.10
%while_end.9:
  let %145 = load %j
  let %146 = add %145, 1
  let %147 = store %146, %j
  jmp label %while_cond.7
%while_cond.10:
  let %149 = load %l
  let %150 = lt %149, 3
  br %150, label %while_body.10, label %while_end.10
%while_body.10:
  let %m = alloca i32, 1
  let %152 = load %i
  let %153 = mul %152, 3
  let %154 = load %k
  let %155 = add %153, %154
  let %156 = load %j
  let %157 = mul %156, 3
  let %158 = load %l
  let %159 = add %157, %158
  let %160 = offset i32, #a, [%155< none], [%159< 9]
  let %161 = load %160
  let %162 = store %161, %m
  let %163 = load %m
  br %163, label %if_then.4, label %if_end.4
%while_end.10:
  let %165 = load %k
  let %166 = add %165, 1
  let %167 = store %166, %k
  jmp label %while_cond.9
%if_then.4:
  let %169 = load %m
  let %170 = sub %169, 1
  let %171 = offset i32, %b, [%170< 9]
  let %172 = load %171
  let %173 = eq 0, %172
  br %173, label %if_then.5, label %if_else.2
%if_end.4:
  let %175 = load %l
  let %176 = add %175, 1
  let %177 = store %176, %l
  jmp label %while_cond.10
%if_then.5:
  let %179 = load %m
  let %180 = sub %179, 1
  let %181 = offset i32, %b, [%180< 9]
  let %182 = store 1, %181
  jmp label %if_end.5
%if_end.5:
  jmp label %if_end.4
%if_else.2:
  let %185 = store 0, %ret_val.addr
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %188 = load %ret_val.addr
  ret %188
}
fn @solve_sudoku() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %i = alloca i32, 1
  let %j = alloca i32, 1
  let %solve_i = alloca i32, 1
  let %solve_j = alloca i32, 1
  let %done = alloca i32, 1
  let %0 = store 1, %done
  let %1 = store 0, %i
  jmp label %while_cond
%while_cond:
  let %3 = load %i
  let %4 = lt %3, 9
  let %5 = load %done
  let %6 = and %4, %5
  br %6, label %while_body, label %while_end
%while_body:
  let %8 = store 0, %j
  jmp label %while_cond.1
%while_end:
  let %10 = load %done
  br %10, label %if_then.1, label %if_end.1
%while_cond.1:
  let %12 = load %j
  let %13 = lt %12, 9
  let %14 = load %done
  let %15 = and %13, %14
  br %15, label %while_body.1, label %while_end.1
%while_body.1:
  let %17 = load %i
  let %18 = load %j
  let %19 = offset i32, @a, [%17< 9], [%18< 9]
  let %20 = load %19
  let %21 = eq %20, 0
  br %21, label %if_then, label %if_end
%while_end.1:
  let %23 = load %i
  let %24 = add %23, 1
  let %25 = store %24, %i
  jmp label %while_cond
%if_then:
  let %27 = store 0, %done
  let %28 = load %i
  let %29 = store %28, %solve_i
  let %30 = load %j
  let %31 = store %30, %solve_j
  jmp label %if_end
%if_end:
  let %33 = load %j
  let %34 = add %33, 1
  let %35 = store %34, %j
  jmp label %while_cond.1
%if_then.1:
  let %37 = call @check_sudoku, @a
  let %38 = store %37, %ret_val.addr
  jmp label %exit
%if_end.1:
  let %40 = store 1, %i
  jmp label %while_cond.2
%while_cond.2:
  let %42 = load %i
  let %43 = le %42, 9
  br %43, label %while_body.2, label %while_end.2
%while_body.2:
  let %45 = load %i
  let %46 = load %solve_i
  let %47 = load %solve_j
  let %48 = offset i32, @a, [%46< 9], [%47< 9]
  let %49 = store %45, %48
  let %50 = call @check_sudoku, @a
  br %50, label %if_then.2, label %if_end.2
%while_end.2:
  let %52 = load %solve_i
  let %53 = load %solve_j
  let %54 = offset i32, @a, [%52< 9], [%53< 9]
  let %55 = store 0, %54
  let %56 = store 0, %ret_val.addr
  jmp label %exit
%if_then.2:
  let %58 = call @solve_sudoku
  br %58, label %if_then.3, label %if_end.3
%if_end.2:
  let %60 = load %i
  let %61 = add %60, 1
  let %62 = store %61, %i
  jmp label %while_cond.2
%if_then.3:
  let %64 = store 1, %ret_val.addr
  jmp label %exit
%if_end.3:
  jmp label %if_end.2
%after_return:
  jmp label %exit
%exit:
  let %68 = load %ret_val.addr
  ret %68
}
fn @main() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %i = alloca i32, 1
  let %0 = store 0, %i
  let %j = alloca i32, 1
  let %1 = store 0, %j
  let %solve = alloca i32, 1
  let %2 = store 0, %solve
  jmp label %while_cond
%while_cond:
  let %4 = load %i
  let %5 = lt %4, 9
  br %5, label %while_body, label %while_end
%while_body:
  let %7 = store 0, %j
  jmp label %while_cond.1
%while_end:
  let %9 = load %solve
  br %9, label %if_then.1, label %if_else
%while_cond.1:
  let %11 = load %j
  let %12 = lt %11, 9
  br %12, label %while_body.1, label %while_end.1
%while_body.1:
  let %14 = call @getint
  let %15 = load %i
  let %16 = load %j
  let %17 = offset i32, @a, [%15< 9], [%16< 9]
  let %18 = store %14, %17
  let %19 = load %i
  let %20 = load %j
  let %21 = offset i32, @a, [%19< 9], [%20< 9]
  let %22 = load %21
  let %23 = lt %22, 0
  let %24 = load %i
  let %25 = load %j
  let %26 = offset i32, @a, [%24< 9], [%25< 9]
  let %27 = load %26
  let %28 = gt %27, 9
  let %29 = or %23, %28
  br %29, label %if_then, label %if_end
%while_end.1:
  let %31 = load %i
  let %32 = add %31, 1
  let %33 = store %32, %i
  jmp label %while_cond
%if_then:
  let %35 = call @putint, 0
  let %36 = call @putch, 32
  let %37 = store 0, %ret_val.addr
  jmp label %exit
%if_end:
  let %39 = load %j
  let %40 = add %39, 1
  let %41 = store %40, %j
  jmp label %while_cond.1
%if_then.1:
  let %43 = call @solve_sudoku
  br %43, label %if_then.2, label %if_else.1
%if_end.1:
  let %45 = store 0, %ret_val.addr
  jmp label %exit
%if_else:
  let %47 = call @check_sudoku, @a
  br %47, label %if_then.3, label %if_else.2
%if_then.2:
  let %49 = store 0, %i
  jmp label %while_cond.2
%if_end.2:
  jmp label %if_end.1
%if_else.1:
  let %52 = call @putint, 0
  let %53 = call @putch, 32
  jmp label %if_end.2
%while_cond.2:
  let %55 = load %i
  let %56 = lt %55, 9
  br %56, label %while_body.2, label %while_end.2
%while_body.2:
  let %58 = store 0, %j
  jmp label %while_cond.3
%while_end.2:
  jmp label %if_end.2
%while_cond.3:
  let %61 = load %j
  let %62 = lt %61, 9
  br %62, label %while_body.3, label %while_end.3
%while_body.3:
  let %64 = load %i
  let %65 = load %j
  let %66 = offset i32, @a, [%64< 9], [%65< 9]
  let %67 = load %66
  let %68 = call @putint, %67
  let %69 = call @putch, 32
  let %70 = load %j
  let %71 = add %70, 1
  let %72 = store %71, %j
  jmp label %while_cond.3
%while_end.3:
  let %74 = load %i
  let %75 = add %74, 1
  let %76 = store %75, %i
  jmp label %while_cond.2
%if_then.3:
  let %78 = call @putint, 1
  let %79 = call @putch, 32
  jmp label %if_end.3
%if_end.3:
  jmp label %if_end.1
%if_else.2:
  let %82 = call @putint, 0
  let %83 = call @putch, 32
  jmp label %if_end.3
%after_return:
  jmp label %exit
%exit:
  let %86 = load %ret_val.addr
  ret %86
}

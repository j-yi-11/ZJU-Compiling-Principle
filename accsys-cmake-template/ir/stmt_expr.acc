fn @putint(#x: i32) -> ();
fn @putch(#x: i32) -> ();
fn @putarray(#n: i32, #arr: i32*) -> ();
fn @getint() -> i32;
fn @getch() -> i32;
fn @getarray(#n: i32, #arr: i32*) -> ();
fn @main() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %k = alloca i32, 1
  let %n = alloca i32, 1
  let %0 = store 10, %n
  let %i = alloca i32, 1
  let %1 = store 0, %i
  let %2 = load %k
  let %3 = store 1, %2
  jmp label %while_cond
%while_cond:
  let %5 = load %i
  let %6 = load %n
  let %7 = sub %6, 1
  let %8 = le %5, %7
  br %8, label %while_body, label %while_end
%while_body:
  let %10 = load %i
  let %11 = add %10, 1
  let %12 = load %i
  let %13 = store %11, %12
  let %14 = load %k
  let %15 = add %14, 1
  let %16 = load %k
  let %17 = load %k
  let %18 = add %16, %17
  let %19 = load %k
  let %20 = store %18, %19
  jmp label %while_cond
%while_end:
  let %22 = load %k
  let %23 = call @putint, %22
  let %24 = store 0, %ret_val.addr
  jmp label %exit
  jmp label %exit
%after return:
  jmp label %exit
%exit:
  let %28 = load %ret_val.addr
  ret %28
}

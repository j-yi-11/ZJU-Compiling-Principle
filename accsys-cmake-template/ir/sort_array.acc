fn @putint(#x: i32) -> ();
fn @putch(#x: i32) -> ();
fn @putarray(#n: i32, #arr: i32*) -> ();
fn @getint() -> i32;
fn @getch() -> i32;
fn @getarray(#n: i32, #arr: i32*) -> ();
fn @main() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %b = alloca i32, 3
  let %c = alloca i32, 10
  let %i = alloca i32, 1
  let %0 = store 0, %i
  let %j = alloca i32, 1
  let %t = alloca i32, 1
  let %a = alloca i32, 5
  jmp label %while_cond
%while_cond:
  let %2 = load %i
  let %3 = lt %2, 5
  br %3, label %while_body, label %while_end
%while_body:
  let %5 = call @getint
  let %6 = load %i
  let %7 = offset i32, %a, [%6< 5]
  let %8 = store %5, %7
  let %9 = load %i
  let %10 = add %9, 1
  let %11 = store %10, %i
  jmp label %while_cond
%while_end:
  let %13 = store 0, %i
  jmp label %while_cond.1
%while_cond.1:
  let %15 = load %i
  let %16 = lt %15, 4
  br %16, label %while_body.1, label %while_end.1
%while_body.1:
  let %18 = load %i
  let %19 = add %18, 1
  let %20 = store %19, %j
  jmp label %while_cond.2
%while_end.1:
  let %22 = store 0, %i
  jmp label %while_cond.3
%while_cond.2:
  let %24 = load %j
  let %25 = lt %24, 5
  br %25, label %while_body.2, label %while_end.2
%while_body.2:
  let %27 = load %i
  let %28 = offset i32, %a, [%27< 5]
  let %29 = load %28
  let %30 = load %j
  let %31 = offset i32, %a, [%30< 5]
  let %32 = load %31
  let %33 = gt %29, %32
  br %33, label %if_then, label %if_end
%while_end.2:
  let %35 = load %i
  let %36 = add %35, 1
  let %37 = store %36, %i
  jmp label %while_cond.1
%if_then:
  let %39 = load %i
  let %40 = offset i32, %a, [%39< 5]
  let %41 = load %40
  let %42 = store %41, %t
  let %43 = load %j
  let %44 = offset i32, %a, [%43< 5]
  let %45 = load %44
  let %46 = load %i
  let %47 = offset i32, %a, [%46< 5]
  let %48 = store %45, %47
  let %49 = load %t
  let %50 = load %j
  let %51 = offset i32, %a, [%50< 5]
  let %52 = store %49, %51
  jmp label %if_end
%if_end:
  let %54 = load %j
  let %55 = add %54, 1
  let %56 = store %55, %j
  jmp label %while_cond.2
%while_cond.3:
  let %58 = load %i
  let %59 = lt %58, 5
  br %59, label %while_body.3, label %while_end.3
%while_body.3:
  let %61 = load %i
  let %62 = offset i32, %a, [%61< 5]
  let %63 = load %62
  let %64 = call @putint, %63
  let %65 = call @putch, 32
  let %66 = load %i
  let %67 = add %66, 1
  let %68 = store %67, %i
  jmp label %while_cond.3
%while_end.3:
  let %70 = store 0, %ret_val.addr
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %73 = load %ret_val.addr
  ret %73
}

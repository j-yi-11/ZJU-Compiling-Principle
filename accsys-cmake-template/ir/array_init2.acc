fn @putint(#x: i32) -> ();

fn @putch(#x: i32) -> ();

fn @putarray(#n: i32, #arr: i32*) -> ();

fn @getint() -> i32;

fn @getch() -> i32;

fn @getarray(#n: i32, #arr: i32*) -> ();

fn @print_array(#a: i32*) -> () {
%entry:
  let %i: i32* = alloca i32, 1
  let %3: () = store 0, %i: i32*
  jmp label %while_cond
%while_cond:
  let %7: i32 = load %i: i32*
  let %8: i32 = lt %7: i32, 4
  br %8: i32, label %while_body, label %while_end
%while_body:
  let %j: i32* = alloca i32, 1
  let %10: () = store 0, %j: i32*
  jmp label %while_cond.1
%while_end:
  jmp label %exit
%while_cond.1:
  let %14: i32 = load %j: i32*
  let %15: i32 = lt %14: i32, 2
  br %15: i32, label %while_body.1, label %while_end.1
%while_body.1:
  let %16: i32 = load %i: i32*
  let %17: i32 = load %j: i32*
  let %18: i32* = offset i32, #a: i32*, [%16: i32 < none], [%17: i32 < 2]
  let %19: i32 = load %18: i32*
  let %20: () = call @putint, %19: i32
  let %21: () = call @putch, 32
  let %22: i32 = load %j: i32*
  let %23: i32 = add %22: i32, 1
  let %24: () = store %23: i32, %j: i32*
  jmp label %while_cond.1
%while_end.1:
  let %25: i32 = load %i: i32*
  let %26: i32 = add %25: i32, 1
  let %27: () = store %26: i32, %i: i32*
  jmp label %while_cond
%after_return:
  jmp label %exit
%exit:
  ret ()
}

fn @main() -> i32 {
%entry:
  let %ret_val.addr: i32* = alloca i32, 1
  let %b: i32* = alloca i32, 8
  let %4: i32* = offset i32, %b: i32*, [0 < 4], [0 < 2]
  let %5: () = store 1, %4: i32*
  let %6: i32* = offset i32, %b: i32*, [0 < 4], [1 < 2]
  let %7: () = store 2, %6: i32*
  let %8: i32* = offset i32, %b: i32*, [1 < 4], [0 < 2]
  let %9: () = store 3, %8: i32*
  let %10: i32* = offset i32, %b: i32*, [1 < 4], [1 < 2]
  let %11: () = store 4, %10: i32*
  let %12: i32* = offset i32, %b: i32*, [2 < 4], [0 < 2]
  let %13: () = store 5, %12: i32*
  let %14: i32* = offset i32, %b: i32*, [2 < 4], [1 < 2]
  let %15: () = store 6, %14: i32*
  let %16: i32* = offset i32, %b: i32*, [3 < 4], [0 < 2]
  let %17: () = store 7, %16: i32*
  let %18: i32* = offset i32, %b: i32*, [3 < 4], [1 < 2]
  let %19: () = store 8, %18: i32*
  let %c: i32* = alloca i32, 8
  let %21: i32* = offset i32, %c: i32*, [0 < 4], [0 < 2]
  let %22: () = store 1, %21: i32*
  let %23: i32* = offset i32, %c: i32*, [0 < 4], [1 < 2]
  let %24: () = store 2, %23: i32*
  let %25: i32* = offset i32, %c: i32*, [1 < 4], [0 < 2]
  let %26: () = store 3, %25: i32*
  let %27: i32* = offset i32, %c: i32*, [1 < 4], [1 < 2]
  let %28: () = store 4, %27: i32*
  let %29: i32* = offset i32, %c: i32*, [2 < 4], [0 < 2]
  let %30: () = store 5, %29: i32*
  let %31: i32* = offset i32, %c: i32*, [2 < 4], [1 < 2]
  let %32: () = store 6, %31: i32*
  let %33: i32* = offset i32, %c: i32*, [3 < 4], [0 < 2]
  let %34: () = store 7, %33: i32*
  let %35: i32* = offset i32, %c: i32*, [3 < 4], [1 < 2]
  let %36: () = store 8, %35: i32*
  let %d: i32* = alloca i32, 8
  let %38: i32* = offset i32, %d: i32*, [0 < 4], [0 < 2]
  let %39: () = store 1, %38: i32*
  let %40: i32* = offset i32, %d: i32*, [0 < 4], [1 < 2]
  let %41: () = store 2, %40: i32*
  let %42: i32* = offset i32, %d: i32*, [1 < 4], [0 < 2]
  let %43: () = store 3, %42: i32*
  let %44: i32* = offset i32, %d: i32*, [1 < 4], [1 < 2]
  let %45: () = store 4, %44: i32*
  let %46: i32* = offset i32, %d: i32*, [2 < 4], [0 < 2]
  let %47: () = store 5, %46: i32*
  let %48: i32* = offset i32, %d: i32*, [2 < 4], [1 < 2]
  let %49: () = store 6, %48: i32*
  let %50: i32* = offset i32, %d: i32*, [3 < 4], [0 < 2]
  let %51: () = store 7, %50: i32*
  let %52: i32* = offset i32, %d: i32*, [3 < 4], [1 < 2]
  let %53: () = store 8, %52: i32*
  let %54: () = call @print_array, %b: i32*
  let %55: () = call @print_array, %c: i32*
  let %56: () = call @print_array, %d: i32*
  let %57: () = store 0, %ret_val.addr: i32*
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %60: i32 = load %ret_val.addr: i32*
  ret %60: i32
}


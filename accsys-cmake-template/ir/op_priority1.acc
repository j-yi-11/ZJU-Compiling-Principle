fn @putint(#x: i32) -> ();
fn @putch(#x: i32) -> ();
fn @putarray(#n: i32, #arr: i32*) -> ();
fn @getint() -> i32;
fn @getch() -> i32;
fn @getarray(#n: i32, #arr: i32*) -> ();
fn @main() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %a = alloca i32, 1
  let %b = alloca i32, 1
  let %c = alloca i32, 1
  let %d = alloca i32, 1
  let %0 = store 10, %a
  let %1 = store 4, %b
  let %2 = store 2, %c
  let %3 = store 2, %d
  let %result = alloca i32, 1
  let %4 = load %c
  let %5 = load %a
  let %6 = load %b
  let %7 = mul %5, %6
  let %8 = add %4, %7
  let %9 = load %d
  let %10 = sub %8, %9
  let %11 = store %10, %result
  let %12 = load %result
  let %13 = call @putint, %12
  let %14 = store 0, %ret_val.addr
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %17 = load %ret_val.addr
  ret %17
}

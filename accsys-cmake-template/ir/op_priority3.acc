fn @putint(#x: i32) -> ();
fn @putch(#x: i32) -> ();
fn @putarray(#n: i32, #arr: i32*) -> ();
fn @getint() -> i32;
fn @getch() -> i32;
fn @getarray(#n: i32, #arr: i32*) -> ();
fn @main() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %flag = alloca i32, 1
  let %0 = store 0, %flag
  let %a = alloca i32, 1
  let %1 = store 1, %a
  let %b = alloca i32, 1
  let %2 = store 0, %b
  let %c = alloca i32, 1
  let %3 = store 1, %c
  let %d = alloca i32, 1
  let %4 = store 2, %d
  let %e = alloca i32, 1
  let %5 = store 4, %e
  let %6 = load %a
  let %7 = load %b
  let %8 = mul %6, %7
  let %9 = load %c
  let %10 = div %8, %9
  let %11 = load %e
  let %12 = load %d
  let %13 = add %11, %12
  let %14 = eq %10, %13
  let %15 = load %a
  let %16 = load %a
  let %17 = load %b
  let %18 = add %16, %17
  let %19 = mul %15, %18
  let %20 = load %c
  let %21 = add %19, %20
  let %22 = load %d
  let %23 = load %e
  let %24 = add %22, %23
  let %25 = le %21, %24
  let %26 = and %14, %25
  let %27 = load %a
  let %28 = load %b
  let %29 = load %c
  let %30 = mul %28, %29
  let %31 = sub %27, %30
  let %32 = load %d
  let %33 = load %a
  let %34 = load %c
  let %35 = div %33, %34
  let %36 = sub %32, %35
  let %37 = eq %31, %36
  let %38 = or %26, %37
  br %38, label %if_then, label %if_end
%if_then:
  let %40 = load %flag
  let %41 = store 1, %40
  jmp label %if_end
%if_end:
  let %43 = load %flag
  let %44 = call @putint, %43
  let %45 = store 0, %ret_val.addr
  jmp label %exit
  jmp label %exit
%after return:
  jmp label %exit
%exit:
  let %49 = load %ret_val.addr
  ret %49
}

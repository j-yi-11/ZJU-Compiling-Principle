fn @putint(#x: i32) -> ();
fn @putch(#x: i32) -> ();
fn @putarray(#n: i32, #arr: i32*) -> ();
fn @getint() -> i32;
fn @getch() -> i32;
fn @getarray(#n: i32, #arr: i32*) -> ();
fn @initW(#w: i32*) -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %0 = offset i32, #w, [0< none]
  let %1 = load %0
  let %2 = store 0, %1
  let %3 = offset i32, #w, [1< none]
  let %4 = load %3
  let %5 = store 1, %4
  let %6 = offset i32, #w, [2< none]
  let %7 = load %6
  let %8 = store 2, %7
  let %9 = offset i32, #w, [3< none]
  let %10 = load %9
  let %11 = store 5, %10
  let %12 = offset i32, #w, [4< none]
  let %13 = load %12
  let %14 = store 6, %13
  let %15 = offset i32, #w, [5< none]
  let %16 = load %15
  let %17 = store 7, %16
  let %18 = store 0, %ret_val.addr
  jmp label %exit
  jmp label %exit
%after return:
  jmp label %exit
%exit:
  let %22 = load %ret_val.addr
  ret %22
}
fn @initV(#v: i32*) -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %0 = offset i32, #v, [0< none]
  let %1 = load %0
  let %2 = store 0, %1
  let %3 = offset i32, #v, [1< none]
  let %4 = load %3
  let %5 = store 1, %4
  let %6 = offset i32, #v, [2< none]
  let %7 = load %6
  let %8 = store 6, %7
  let %9 = offset i32, #v, [3< none]
  let %10 = load %9
  let %11 = store 18, %10
  let %12 = offset i32, #v, [4< none]
  let %13 = load %12
  let %14 = store 22, %13
  let %15 = offset i32, #v, [5< none]
  let %16 = load %15
  let %17 = store 28, %16
  let %18 = store 0, %ret_val.addr
  jmp label %exit
  jmp label %exit
%after return:
  jmp label %exit
%exit:
  let %22 = load %ret_val.addr
  ret %22
}
fn @main() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %weight = alloca i32, 6
  let %value = alloca i32, 6
  let %results = alloca i32, 72
  let %r_i = alloca i32, 1
  let %r_j = alloca i32, 1
  let %ki = alloca i32, 1
  let %kj = alloca i32, 1
  let %0 = load %weight
  let %1 = call @initW, %0
  let %2 = load %value
  let %3 = call @initV, %2
  let %4 = load %r_i
  let %5 = store 0, %4
  jmp label %while_cond
%while_cond:
  let %7 = load %r_i
  let %8 = lt %7, 6
  br %8, label %while_body, label %while_end
%while_body:
  let %10 = load %r_j
  let %11 = store 0, %10
  jmp label %while_cond.1
%while_end:
  let %13 = load %ki
  let %14 = store 1, %13
  jmp label %while_cond.2
%while_cond.1:
  let %16 = load %r_j
  let %17 = lt %16, 12
  br %17, label %while_body.1, label %while_end.1
%while_body.1:
  let %19 = load %r_i
  let %20 = load %r_j
  let %21 = offset i32, %results, [%19< 6], [%20< 12]
  let %22 = load %21
  let %23 = store 0, %22
  let %24 = load %r_j
  let %25 = add %24, 1
  let %26 = load %r_j
  let %27 = store %25, %26
  jmp label %while_cond.1
%while_end.1:
  let %29 = load %r_i
  let %30 = add %29, 1
  let %31 = load %r_i
  let %32 = store %30, %31
  jmp label %while_cond
%while_cond.2:
  let %34 = load %ki
  let %35 = lt %34, 6
  br %35, label %while_body.2, label %while_end.2
%while_body.2:
  let %37 = load %kj
  let %38 = store 1, %37
  jmp label %while_cond.3
%while_end.2:
  let %40 = offset i32, %results, [5< 6], [11< 12]
  let %41 = load %40
  let %42 = call @putint, %41
  let %43 = store 0, %ret_val.addr
  jmp label %exit
  jmp label %exit
%while_cond.3:
  let %46 = load %kj
  let %47 = lt %46, 12
  br %47, label %while_body.3, label %while_end.3
%while_body.3:
  let %49 = load %kj
  let %50 = load %ki
  let %51 = offset i32, %weight, [%50< 6]
  let %52 = load %51
  let %53 = lt %49, %52
  br %53, label %if_then, label %if_else
%while_end.3:
  let %55 = load %ki
  let %56 = add %55, 1
  let %57 = load %ki
  let %58 = store %56, %57
  jmp label %while_cond.2
%if_then:
  let %60 = load %ki
  let %61 = sub %60, 1
  let %62 = load %kj
  let %63 = offset i32, %results, [%61< 6], [%62< 12]
  let %64 = load %63
  let %65 = load %ki
  let %66 = load %kj
  let %67 = offset i32, %results, [%65< 6], [%66< 12]
  let %68 = load %67
  let %69 = store %64, %68
  jmp label %if_end
%if_end:
  let %71 = load %kj
  let %72 = add %71, 1
  let %73 = load %kj
  let %74 = store %72, %73
  jmp label %while_cond.3
%if_else:
  let %76 = load %ki
  let %77 = sub %76, 1
  let %78 = load %kj
  let %79 = offset i32, %results, [%77< 6], [%78< 12]
  let %80 = load %79
  let %81 = load %ki
  let %82 = offset i32, %value, [%81< 6]
  let %83 = load %82
  let %84 = load %ki
  let %85 = sub %84, 1
  let %86 = load %kj
  let %87 = load %ki
  let %88 = offset i32, %weight, [%87< 6]
  let %89 = load %88
  let %90 = sub %86, %89
  let %91 = offset i32, %results, [%85< 6], [%90< 12]
  let %92 = load %91
  let %93 = add %83, %92
  let %94 = gt %80, %93
  br %94, label %if_then.1, label %if_else.1
%if_then.1:
  let %96 = load %ki
  let %97 = sub %96, 1
  let %98 = load %kj
  let %99 = offset i32, %results, [%97< 6], [%98< 12]
  let %100 = load %99
  let %101 = load %ki
  let %102 = load %kj
  let %103 = offset i32, %results, [%101< 6], [%102< 12]
  let %104 = load %103
  let %105 = store %100, %104
  jmp label %if_end.1
%if_end.1:
  jmp label %if_end
%if_else.1:
  let %108 = load %ki
  let %109 = offset i32, %value, [%108< 6]
  let %110 = load %109
  let %111 = load %ki
  let %112 = sub %111, 1
  let %113 = load %kj
  let %114 = load %ki
  let %115 = offset i32, %weight, [%114< 6]
  let %116 = load %115
  let %117 = sub %113, %116
  let %118 = offset i32, %results, [%112< 6], [%117< 12]
  let %119 = load %118
  let %120 = add %110, %119
  let %121 = load %ki
  let %122 = load %kj
  let %123 = offset i32, %results, [%121< 6], [%122< 12]
  let %124 = load %123
  let %125 = store %120, %124
  jmp label %if_end.1
%after return:
  jmp label %exit
%exit:
  let %128 = load %ret_val.addr
  ret %128
}

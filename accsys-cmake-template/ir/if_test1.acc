fn @putint(#x: i32) -> ();
fn @putch(#x: i32) -> ();
fn @putarray(#n: i32, #arr: i32*) -> ();
fn @getint() -> i32;
fn @getch() -> i32;
fn @getarray(#n: i32, #arr: i32*) -> ();
fn @if_ifElse_() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %a = alloca i32, 1
  let %0 = load %a
  let %1 = store 5, %0
  let %b = alloca i32, 1
  let %2 = load %b
  let %3 = store 10, %2
  let %4 = load %a
  let %5 = eq %4, 5
  br %5, label %if_then, label %if_end
%if_then:
  let %7 = load %b
  let %8 = eq %7, 10
  br %8, label %if_then.1, label %if_else
%if_end:
  let %10 = load %a
  let %11 = store %10, %ret_val.addr
  jmp label %exit
  jmp label %exit
%if_then.1:
  let %14 = load %a
  let %15 = store 25, %14
  jmp label %if_end.1
%if_end.1:
  jmp label %if_end
%if_else:
  let %18 = load %a
  let %19 = add %18, 15
  let %20 = load %a
  let %21 = store %19, %20
  jmp label %if_end.1
%after return:
  jmp label %exit
%exit:
  let %24 = load %ret_val.addr
  ret %24
}
fn @main() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %0 = call @if_ifElse_
  let %1 = call @putint, %0
  let %2 = store 0, %ret_val.addr
  jmp label %exit
  jmp label %exit
%after return:
  jmp label %exit
%exit:
  let %6 = load %ret_val.addr
  ret %6
}

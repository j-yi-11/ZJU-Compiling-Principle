fn @putint(#x: i32) -> ();
fn @putch(#x: i32) -> ();
fn @putarray(#n: i32, #arr: i32*) -> ();
fn @getint() -> i32;
fn @getch() -> i32;
fn @getarray(#n: i32, #arr: i32*) -> ();
fn @if_ifElse_() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %a = alloca i32, 1
  let %0 = store 5, %a
  let %b = alloca i32, 1
  let %1 = store 10, %b
  let %2 = load %a
  let %3 = eq %2, 5
  br %3, label %if_then, label %if_end
%if_then:
  let %5 = load %b
  let %6 = eq %5, 10
  br %6, label %if_then.1, label %if_else
%if_end:
  let %8 = load %a
  let %9 = store %8, %ret_val.addr
  jmp label %exit
%if_then.1:
  let %11 = store 25, %a
  jmp label %if_end.1
%if_end.1:
  jmp label %if_end
%if_else:
  let %14 = load %a
  let %15 = add %14, 15
  let %16 = store %15, %a
  jmp label %if_end.1
%after_return:
  jmp label %exit
%exit:
  let %19 = load %ret_val.addr
  ret %19
}
fn @main() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %0 = call @if_ifElse_
  let %1 = call @putint, %0
  let %2 = store 0, %ret_val.addr
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %5 = load %ret_val.addr
  ret %5
}

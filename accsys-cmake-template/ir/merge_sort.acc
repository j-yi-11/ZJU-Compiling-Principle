fn @putint(#x: i32) -> ();
fn @putch(#x: i32) -> ();
fn @putarray(#n: i32, #arr: i32*) -> ();
fn @getint() -> i32;
fn @getch() -> i32;
fn @getarray(#n: i32, #arr: i32*) -> ();
fn @main() -> i32 {
%entry:
  let %ret_val.addr = alloca i32, 1
  let %n = alloca i32, 1
  let %0 = store 5, %n
  let %arr = alloca i32, 5
  let %tmp = alloca i32, 5
  let %i = alloca i32, 1
  let %intv = alloca i32, 1
  let %s1 = alloca i32, 1
  let %e1 = alloca i32, 1
  let %cur1 = alloca i32, 1
  let %s2 = alloca i32, 1
  let %e2 = alloca i32, 1
  let %cur2 = alloca i32, 1
  let %1 = store 0, %i
  jmp label %while_cond
%while_cond:
  let %3 = load %i
  let %4 = load %n
  let %5 = lt %3, %4
  br %5, label %while_body, label %while_end
%while_body:
  let %7 = call @getint
  let %8 = load %i
  let %9 = offset i32, %arr, [%8< 5]
  let %10 = store %7, %9
  let %11 = load %i
  let %12 = add %11, 1
  let %13 = store %12, %i
  jmp label %while_cond
%while_end:
  let %15 = store 1, %intv
  jmp label %while_cond.1
%while_cond.1:
  let %17 = load %intv
  let %18 = load %n
  let %19 = lt %17, %18
  br %19, label %while_body.1, label %while_end.1
%while_body.1:
  let %21 = store 0, %i
  jmp label %while_cond.2
%while_end.1:
  let %23 = store 0, %i
  jmp label %while_cond.11
%while_cond.2:
  let %25 = load %i
  let %26 = load %n
  let %27 = load %intv
  let %28 = mul 2, %27
  let %29 = sub %26, %28
  let %30 = le %25, %29
  br %30, label %while_body.2, label %while_end.2
%while_body.2:
  let %32 = load %i
  let %33 = store %32, %s1
  let %34 = load %s1
  let %35 = load %intv
  let %36 = add %34, %35
  let %37 = store %36, %e1
  let %38 = load %s1
  let %39 = store %38, %cur1
  let %40 = load %e1
  let %41 = store %40, %s2
  let %42 = load %s2
  let %43 = load %intv
  let %44 = add %42, %43
  let %45 = store %44, %e2
  let %46 = load %s2
  let %47 = store %46, %cur2
  jmp label %while_cond.3
%while_end.2:
  let %49 = load %i
  let %50 = load %intv
  let %51 = add %49, %50
  let %52 = load %n
  let %53 = lt %51, %52
  br %53, label %if_then.1, label %if_else.1
%while_cond.3:
  let %55 = load %cur1
  let %56 = load %e1
  let %57 = lt %55, %56
  let %58 = load %cur2
  let %59 = load %e2
  let %60 = lt %58, %59
  let %61 = and %57, %60
  br %61, label %while_body.3, label %while_end.3
%while_body.3:
  let %63 = load %cur1
  let %64 = offset i32, %arr, [%63< 5]
  let %65 = load %64
  let %66 = load %cur2
  let %67 = offset i32, %arr, [%66< 5]
  let %68 = load %67
  let %69 = lt %65, %68
  br %69, label %if_then, label %if_else
%while_end.3:
  jmp label %while_cond.4
%if_then:
  let %72 = load %cur1
  let %73 = offset i32, %arr, [%72< 5]
  let %74 = load %73
  let %75 = load %i
  let %76 = offset i32, %tmp, [%75< 5]
  let %77 = store %74, %76
  let %78 = load %cur1
  let %79 = add %78, 1
  let %80 = store %79, %cur1
  jmp label %if_end
%if_end:
  let %82 = load %i
  let %83 = add %82, 1
  let %84 = store %83, %i
  jmp label %while_cond.3
%if_else:
  let %86 = load %cur2
  let %87 = offset i32, %arr, [%86< 5]
  let %88 = load %87
  let %89 = load %i
  let %90 = offset i32, %tmp, [%89< 5]
  let %91 = store %88, %90
  let %92 = load %cur2
  let %93 = add %92, 1
  let %94 = store %93, %cur2
  jmp label %if_end
%while_cond.4:
  let %96 = load %cur1
  let %97 = load %e1
  let %98 = lt %96, %97
  br %98, label %while_body.4, label %while_end.4
%while_body.4:
  let %100 = load %cur1
  let %101 = offset i32, %arr, [%100< 5]
  let %102 = load %101
  let %103 = load %i
  let %104 = offset i32, %tmp, [%103< 5]
  let %105 = store %102, %104
  let %106 = load %cur1
  let %107 = add %106, 1
  let %108 = store %107, %cur1
  let %109 = load %i
  let %110 = add %109, 1
  let %111 = store %110, %i
  jmp label %while_cond.4
%while_end.4:
  jmp label %while_cond.5
%while_cond.5:
  let %114 = load %cur2
  let %115 = load %e2
  let %116 = lt %114, %115
  br %116, label %while_body.5, label %while_end.5
%while_body.5:
  let %118 = load %cur2
  let %119 = offset i32, %arr, [%118< 5]
  let %120 = load %119
  let %121 = load %i
  let %122 = offset i32, %tmp, [%121< 5]
  let %123 = store %120, %122
  let %124 = load %cur2
  let %125 = add %124, 1
  let %126 = store %125, %cur2
  let %127 = load %i
  let %128 = add %127, 1
  let %129 = store %128, %i
  jmp label %while_cond.5
%while_end.5:
  jmp label %while_cond.2
%if_then.1:
  let %132 = load %i
  let %133 = store %132, %s1
  let %134 = load %s1
  let %135 = load %intv
  let %136 = add %134, %135
  let %137 = store %136, %e1
  let %138 = load %s1
  let %139 = store %138, %cur1
  let %140 = load %e1
  let %141 = store %140, %s2
  let %142 = load %n
  let %143 = store %142, %e2
  let %144 = load %s2
  let %145 = store %144, %cur2
  jmp label %while_cond.6
%if_end.1:
  let %147 = store 0, %i
  jmp label %while_cond.10
%if_else.1:
  jmp label %while_cond.9
%while_cond.6:
  let %150 = load %cur1
  let %151 = load %e1
  let %152 = lt %150, %151
  let %153 = load %cur2
  let %154 = load %e2
  let %155 = lt %153, %154
  let %156 = and %152, %155
  br %156, label %while_body.6, label %while_end.6
%while_body.6:
  let %158 = load %cur1
  let %159 = offset i32, %arr, [%158< 5]
  let %160 = load %159
  let %161 = load %cur2
  let %162 = offset i32, %arr, [%161< 5]
  let %163 = load %162
  let %164 = lt %160, %163
  br %164, label %if_then.2, label %if_else.2
%while_end.6:
  jmp label %while_cond.7
%if_then.2:
  let %167 = load %cur1
  let %168 = offset i32, %arr, [%167< 5]
  let %169 = load %168
  let %170 = load %i
  let %171 = offset i32, %tmp, [%170< 5]
  let %172 = store %169, %171
  let %173 = load %cur1
  let %174 = add %173, 1
  let %175 = store %174, %cur1
  let %176 = load %i
  let %177 = add %176, 1
  let %178 = store %177, %i
  jmp label %if_end.2
%if_end.2:
  jmp label %while_cond.6
%if_else.2:
  let %181 = load %cur2
  let %182 = offset i32, %arr, [%181< 5]
  let %183 = load %182
  let %184 = load %i
  let %185 = offset i32, %tmp, [%184< 5]
  let %186 = store %183, %185
  let %187 = load %cur2
  let %188 = add %187, 1
  let %189 = store %188, %cur2
  let %190 = load %i
  let %191 = add %190, 1
  let %192 = store %191, %i
  jmp label %if_end.2
%while_cond.7:
  let %194 = load %cur1
  let %195 = load %e1
  let %196 = lt %194, %195
  br %196, label %while_body.7, label %while_end.7
%while_body.7:
  let %198 = load %cur1
  let %199 = offset i32, %arr, [%198< 5]
  let %200 = load %199
  let %201 = load %i
  let %202 = offset i32, %tmp, [%201< 5]
  let %203 = store %200, %202
  let %204 = load %cur1
  let %205 = add %204, 1
  let %206 = store %205, %cur1
  let %207 = load %i
  let %208 = add %207, 1
  let %209 = store %208, %i
  jmp label %while_cond.7
%while_end.7:
  jmp label %while_cond.8
%while_cond.8:
  let %212 = load %cur2
  let %213 = load %e2
  let %214 = lt %212, %213
  br %214, label %while_body.8, label %while_end.8
%while_body.8:
  let %216 = load %cur2
  let %217 = offset i32, %arr, [%216< 5]
  let %218 = load %217
  let %219 = load %i
  let %220 = offset i32, %tmp, [%219< 5]
  let %221 = store %218, %220
  let %222 = load %cur2
  let %223 = add %222, 1
  let %224 = store %223, %cur2
  let %225 = load %i
  let %226 = add %225, 1
  let %227 = store %226, %i
  jmp label %while_cond.8
%while_end.8:
  jmp label %if_end.1
%while_cond.9:
  let %230 = load %i
  let %231 = load %n
  let %232 = lt %230, %231
  br %232, label %while_body.9, label %while_end.9
%while_body.9:
  let %234 = load %i
  let %235 = offset i32, %arr, [%234< 5]
  let %236 = load %235
  let %237 = load %i
  let %238 = offset i32, %tmp, [%237< 5]
  let %239 = store %236, %238
  let %240 = load %i
  let %241 = add %240, 1
  let %242 = store %241, %i
  jmp label %while_cond.9
%while_end.9:
  jmp label %if_end.1
%while_cond.10:
  let %245 = load %i
  let %246 = load %n
  let %247 = lt %245, %246
  br %247, label %while_body.10, label %while_end.10
%while_body.10:
  let %249 = load %i
  let %250 = offset i32, %tmp, [%249< 5]
  let %251 = load %250
  let %252 = load %i
  let %253 = offset i32, %arr, [%252< 5]
  let %254 = store %251, %253
  let %255 = load %i
  let %256 = add %255, 1
  let %257 = store %256, %i
  jmp label %while_cond.10
%while_end.10:
  let %259 = load %intv
  let %260 = mul %259, 2
  let %261 = store %260, %intv
  jmp label %while_cond.1
%while_cond.11:
  let %263 = load %i
  let %264 = load %n
  let %265 = lt %263, %264
  br %265, label %while_body.11, label %while_end.11
%while_body.11:
  let %267 = load %i
  let %268 = offset i32, %arr, [%267< 5]
  let %269 = load %268
  let %270 = call @putint, %269
  let %271 = call @putch, 32
  let %272 = load %i
  let %273 = add %272, 1
  let %274 = store %273, %i
  jmp label %while_cond.11
%while_end.11:
  let %276 = store 0, %ret_val.addr
  jmp label %exit
%after_return:
  jmp label %exit
%exit:
  let %279 = load %ret_val.addr
  ret %279
}

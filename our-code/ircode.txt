fn @putint(#x: i32) -> ();

fn @putch(#x: i32) -> ();

fn @putarray(#n: i32, #arr: i32*) -> ();

fn @getint() -> i32;

fn @getch() -> i32;

fn @getarray(#n: i32, #arr: i32*) -> ();

@a region i32, 1

fn @func() -> i32{
%entry:
let %ret_val.addr: i32* = alloca i32, 1
let %b: i32* = alloca i32, 1

let %2:() = store ,%b: i32*
let %a: i32* = alloca i32, 1

let %3:() = store 1,%a: i32*
%exit:
let %4: i32 = load %ret_val.addr: i32*
ret %4: i32
}
fn @main() -> i32{
%entry:
let %ret_val.addr: i32* = alloca i32, 1
let %1:() = store 7,@a: i32*
let %result: i32* = alloca i32, 1

let %5:() = store 0,%result: i32*
let %i: i32* = alloca i32, 1

let %6:() = store 0,%i: i32*
let %7: () = store 0, %ret_val.addr: i32*
jmp label %exit
%exit:
let %8: i32 = load %ret_val.addr: i32*
ret %8: i32
}
